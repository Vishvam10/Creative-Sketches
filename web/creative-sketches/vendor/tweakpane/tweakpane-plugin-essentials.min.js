!(function(t, e) {
    "object" == typeof exports && "undefined" != typeof module ?
        e(exports) :
        "function" == typeof define && define.amd ?
        define(["exports"], e) :
        e(
            ((t =
                "undefined" != typeof globalThis ?
                globalThis :
                t || self).TweakpaneEssentialsPlugin = {})
        );
})(this, function(t) {
    "use strict";
    class e {
        constructor(t) {
            this.controller_ = t;
        }
        get disabled() {
            return this.controller_.viewProps.get("disabled");
        }
        set disabled(t) {
            this.controller_.viewProps.set("disabled", t);
        }
        get hidden() {
            return this.controller_.viewProps.get("hidden");
        }
        set hidden(t) {
            this.controller_.viewProps.set("hidden", t);
        }
        dispose() {
            this.controller_.viewProps.set("disposed", !0);
        }
    }
    class i {
        constructor(t) {
            this.target = t;
        }
    }
    class s extends i {
        constructor(t, e, i, s) {
            super(t),
                (this.value = e),
                (this.presetKey = i),
                (this.last = null == s || s);
        }
    }

    function n(t) {
        return null == t;
    }
    const r = {
        alreadydisposed: () => "View has been already disposed",
        invalidparams: (t) => `Invalid parameters for '${t.name}'`,
        nomatchingcontroller: (t) => `No matching controller for '${t.key}'`,
        nomatchingview: (t) => `No matching view for '${JSON.stringify(t.params)}'`,
        notbindable: () => "Value is not bindable",
        propertynotfound: (t) => `Property '${t.name}' not found`,
        shouldneverhappen: () => "This error should never happen",
    };
    class o {
        constructor(t) {
            var e;
            (this.message =
                null !== (e = r[t.type](t.context)) && void 0 !== e ?
                e :
                "Unexpected error"),
            (this.name = this.constructor.name),
            (this.stack = new Error(this.message).stack),
            (this.type = t.type);
        }
        static alreadyDisposed() {
            return new o({ type: "alreadydisposed" });
        }
        static notBindable() {
            return new o({ type: "notbindable" });
        }
        static propertyNotFound(t) {
            return new o({ type: "propertynotfound", context: { name: t } });
        }
        static shouldNeverHappen() {
            return new o({ type: "shouldneverhappen" });
        }
    }
    class a {
        constructor() {
            this.observers_ = {};
        }
        on(t, e) {
            let i = this.observers_[t];
            return i || (i = this.observers_[t] = []), i.push({ handler: e }), this;
        }
        off(t, e) {
            const i = this.observers_[t];
            return i && (this.observers_[t] = i.filter((t) => t.handler !== e)), this;
        }
        emit(t, e) {
            const i = this.observers_[t];
            i &&
                i.forEach((t) => {
                    t.handler(e);
                });
        }
    }
    const l = "tp";

    function p(t) {
        return (e, i) => [l, "-", t, "v", e ? `_${e}` : "", i ? `-${i}` : ""].join("");
    }

    function h(t) {
        return t.rawValue;
    }

    function c(t, e) {
        var i, s;
        t.emitter.on("change", ((i = h), (s = e), (t) => s(i(t)))), e(t.rawValue);
    }

    function d(t, e, i) {
        c(t.value(e), i);
    }

    function u(t, e) {
        return (i) => {
            !(function(t, e, i) {
                i ? t.classList.add(e) : t.classList.remove(e);
            })(t, e, i);
        };
    }
    const v = p("btn");
    class b {
        constructor(t, e) {
            (this.element = t.createElement("div")),
            this.element.classList.add(v()),
                e.viewProps.bindClassModifiers(this.element);
            const i = t.createElement("button");
            i.classList.add(v("b")),
                e.viewProps.bindDisabled(i),
                this.element.appendChild(i),
                (this.buttonElement = i);
            const s = t.createElement("div");
            var n, r;
            s.classList.add(v("t")),
                (n = e.props.value("title")),
                (r = s),
                c(n, (t) => {
                    r.textContent = null != t ? t : "";
                }),
                this.buttonElement.appendChild(s);
        }
    }
    class m {
        constructor(t, e) {
            (this.emitter = new a()),
            (this.onClick_ = this.onClick_.bind(this)),
            (this.props = e.props),
            (this.viewProps = e.viewProps),
            (this.view = new b(t, {
                props: this.props,
                viewProps: this.viewProps,
            })),
            this.view.buttonElement.addEventListener("click", this.onClick_);
        }
        onClick_() {
            this.emitter.emit("click", { sender: this });
        }
    }
    class g {
        constructor(t, e) {
            var i;
            (this.constraint_ = null == e ? void 0 : e.constraint),
            (this.equals_ =
                null !== (i = null == e ? void 0 : e.equals) && void 0 !== i ?
                i :
                (t, e) => t === e),
            (this.emitter = new a()),
            (this.rawValue_ = t);
        }
        get constraint() {
            return this.constraint_;
        }
        get rawValue() {
            return this.rawValue_;
        }
        set rawValue(t) {
            this.setRawValue(t, { forceEmit: !1, last: !0 });
        }
        setRawValue(t, e) {
            const i = null != e ? e : { forceEmit: !1, last: !0 },
                s = this.constraint_ ? this.constraint_.constrain(t) : t;
            (!this.equals_(this.rawValue_, s) || i.forceEmit) &&
            (this.emitter.emit("beforechange", { sender: this }),
                (this.rawValue_ = s),
                this.emitter.emit("change", { options: i, rawValue: s, sender: this }));
        }
    }
    class _ {
        constructor(t) {
            (this.emitter = new a()), (this.value_ = t);
        }
        get rawValue() {
            return this.value_;
        }
        set rawValue(t) {
            this.setRawValue(t, { forceEmit: !1, last: !0 });
        }
        setRawValue(t, e) {
            const i = null != e ? e : { forceEmit: !1, last: !0 };
            (this.value_ !== t || i.forceEmit) &&
            (this.emitter.emit("beforechange", { sender: this }),
                (this.value_ = t),
                this.emitter.emit("change", {
                    options: i,
                    rawValue: this.value_,
                    sender: this,
                }));
        }
    }

    function f(t, e) {
        const i = null == e ? void 0 : e.constraint,
            s = null == e ? void 0 : e.equals;
        return i || s ? new g(t, e) : new _(t);
    }
    class w {
        constructor(t) {
            (this.emitter = new a()), (this.valMap_ = t);
            for (const t in this.valMap_) {
                this.valMap_[t].emitter.on("change", () => {
                    this.emitter.emit("change", { key: t, sender: this });
                });
            }
        }
        static createCore(t) {
            return Object.keys(t).reduce(
                (e, i) => Object.assign(e, {
                    [i]: f(t[i]) }), {}
            );
        }
        static fromObject(t) {
            const e = this.createCore(t);
            return new w(e);
        }
        get(t) {
            return this.valMap_[t].rawValue;
        }
        set(t, e) {
            this.valMap_[t].rawValue = e;
        }
        value(t) {
            return this.valMap_[t];
        }
    }

    function x(t) {
        return (e) => (i) => {
            if (!e && void 0 === i) return { succeeded: !1, value: void 0 };
            if (e && void 0 === i) return { succeeded: !0, value: void 0 };
            const s = t(i);
            return void 0 !== s ?
                { succeeded: !0, value: s } :
                { succeeded: !1, value: void 0 };
        };
    }

    function y(t) {
        return {
            custom: (e) => x(e)(t),
            boolean: x((t) => ("boolean" == typeof t ? t : void 0))(t),
            number: x((t) => ("number" == typeof t ? t : void 0))(t),
            string: x((t) => ("string" == typeof t ? t : void 0))(t),
            function: x((t) => ("function" == typeof t ? t : void 0))(t),
            constant: (e) => x((t) => (t === e ? e : void 0))(t),
            raw: x((t) => t)(t),
            object: (e) =>
                x((t) => {
                    var i;
                    if (null !== (i = t) && "object" == typeof i)
                        return (function(t, e) {
                            return Object.keys(e).reduce((i, s) => {
                                if (void 0 === i) return;
                                const n = (0, e[s])(t[s]);
                                return n.succeeded ?
                                    Object.assign(Object.assign({}, i), {
                                        [s]: n.value }) :
                                    void 0;
                            }, {});
                        })(t, e);
                })(t),
            array: (e) =>
                x((t) => {
                    var i;
                    if (Array.isArray(t))
                        return (
                            (i = e),
                            t.reduce((t, e) => {
                                if (void 0 === t) return;
                                const s = i(e);
                                return s.succeeded && void 0 !== s.value ?
                                    [...t, s.value] :
                                    void 0;
                            }, [])
                        );
                })(t),
        };
    }
    const C = { optional: y(!0), required: y(!1) };

    function E(t, e) {
        const i = C.required.object(e)(t);
        return i.succeeded ? i.value : void 0;
    }
    const k = p(""),
        P = { veryfirst: "vfst", first: "fst", last: "lst", verylast: "vlst" };
    class V {
        constructor(t) {
            (this.parent_ = null),
            (this.blade = t.blade),
            (this.view = t.view),
            (this.viewProps = t.viewProps);
            const e = this.view.element;
            this.blade.value("positions").emitter.on("change", () => {
                    ["veryfirst", "first", "last", "verylast"].forEach((t) => {
                            e.classList.remove(k(void 0, P[t]));
                        }),
                        this.blade.get("positions").forEach((t) => {
                            e.classList.add(k(void 0, P[t]));
                        });
                }),
                this.viewProps.handleDispose(() => {
                    !(function(t) {
                        t && t.parentElement && t.parentElement.removeChild(t);
                    })(e);
                });
        }
        get parent() {
            return this.parent_;
        }
    }
    const z = "http://www.w3.org/2000/svg";

    function M(t) {
        t.offsetHeight;
    }

    function L(t) {
        return void 0 !== t.ontouchstart;
    }
    const T = p("lbl");
    class D {
        constructor(t, e) {
            (this.element = t.createElement("div")),
            this.element.classList.add(T()),
                e.viewProps.bindClassModifiers(this.element);
            const i = t.createElement("div");
            i.classList.add(T("l")),
                d(e.props, "label", (e) => {
                    n(e) ?
                        this.element.classList.add(T(void 0, "nol")) :
                        (this.element.classList.remove(T(void 0, "nol")),
                            (function(t) {
                                for (; t.childNodes.length > 0;)
                                    t.removeChild(t.childNodes[0]);
                            })(i),
                            i.appendChild(
                                (function(t, e) {
                                    const i = t.createDocumentFragment();
                                    return (
                                        e
                                        .split("\n")
                                        .map((e) => t.createTextNode(e))
                                        .forEach((e, s) => {
                                            s > 0 && i.appendChild(t.createElement("br")),
                                                i.appendChild(e);
                                        }),
                                        i
                                    );
                                })(t, e)
                            ));
                }),
                this.element.appendChild(i),
                (this.labelElement = i);
            const s = t.createElement("div");
            s.classList.add(T("v")),
                this.element.appendChild(s),
                (this.valueElement = s);
        }
    }
    class S extends V {
        constructor(t, e) {
            const i = e.valueController.viewProps;
            super(
                    Object.assign(Object.assign({}, e), {
                        view: new D(t, { props: e.props, viewProps: i }),
                        viewProps: i,
                    })
                ),
                (this.props = e.props),
                (this.valueController = e.valueController),
                this.view.valueElement.appendChild(this.valueController.view.element);
        }
    }
    class K extends V {
        constructor(t) {
            super(t), (this.value = t.value);
        }
    }
    class j extends w {
        constructor(t) {
            super(t);
        }
        static create(t) {
            const e = {
                    completed: !0,
                    expanded: t,
                    expandedHeight: null,
                    shouldFixHeight: !1,
                    temporaryExpanded: null,
                },
                i = w.createCore(e);
            return new j(i);
        }
        get styleExpanded() {
            var t;
            return null !== (t = this.get("temporaryExpanded")) && void 0 !== t ?
                t :
                this.get("expanded");
        }
        get styleHeight() {
            if (!this.styleExpanded) return "0";
            const t = this.get("expandedHeight");
            return this.get("shouldFixHeight") && !n(t) ? `${t}px` : "auto";
        }
        bindExpandedClass(t, e) {
            d(this, "expanded", () => {
                this.styleExpanded ? t.classList.add(e) : t.classList.remove(e);
            });
        }
    }

    function N(t, e) {
        e.style.height = t.styleHeight;
    }

    function O(t, e) {
        t.value("expanded").emitter.on("beforechange", () => {
                t.set("completed", !1),
                    n(t.get("expandedHeight")) &&
                    t.set(
                        "expandedHeight",
                        (function(t, e) {
                            let i = 0;
                            return (
                                (function(t, e) {
                                    const i = t.style.transition;
                                    (t.style.transition = "none"), e(), (t.style.transition = i);
                                })(e, () => {
                                    t.set("expandedHeight", null),
                                        t.set("temporaryExpanded", !0),
                                        M(e),
                                        (i = e.clientHeight),
                                        t.set("temporaryExpanded", null),
                                        M(e);
                                }),
                                i
                            );
                        })(t, e)
                    ),
                    t.set("shouldFixHeight", !0),
                    M(e);
            }),
            t.emitter.on("change", () => {
                N(t, e);
            }),
            N(t, e),
            e.addEventListener("transitionend", (e) => {
                "height" === e.propertyName &&
                    (t.set("shouldFixHeight", !1),
                        t.set("expandedHeight", null),
                        t.set("completed", !0));
            });
    }
    class I {
        constructor(t, e) {
            const i = p(e.viewName);
            (this.element = t.createElement("div")),
            this.element.classList.add(i()),
                e.viewProps.bindClassModifiers(this.element);
        }
    }
    class R extends K {
        constructor(t, e) {
            const i = e.valueController.viewProps;
            super(
                    Object.assign(Object.assign({}, e), {
                        value: e.valueController.value,
                        view: new D(t, { props: e.props, viewProps: i }),
                        viewProps: i,
                    })
                ),
                (this.props = e.props),
                (this.valueController = e.valueController),
                this.view.valueElement.appendChild(this.valueController.view.element);
        }
    }
    const U = p("");

    function $(t, e) {
        return u(t, U(void 0, e));
    }
    class B extends w {
        constructor(t) {
            super(t);
        }
        static create(t) {
            var e, i;
            const s = null != t ? t : {},
                n = {
                    disabled: null !== (e = s.disabled) && void 0 !== e && e,
                    disposed: !1,
                    hidden: null !== (i = s.hidden) && void 0 !== i && i,
                },
                r = w.createCore(n);
            return new B(r);
        }
        bindClassModifiers(t) {
            d(this, "disabled", $(t, "disabled")), d(this, "hidden", $(t, "hidden"));
        }
        bindDisabled(t) {
            d(this, "disabled", (e) => {
                t.disabled = e;
            });
        }
        bindTabIndex(t) {
            d(this, "disabled", (e) => {
                t.tabIndex = e ? -1 : 0;
            });
        }
        handleDispose(t) {
            this.value("disposed").emitter.on("change", (e) => {
                e && t();
            });
        }
    }
    class q {
        constructor() {
            (this.disabled = !1), (this.emitter = new a());
        }
        dispose() {}
        tick() {
            this.disabled || this.emitter.emit("tick", { sender: this });
        }
    }
    class A {
        constructor(t, e) {
            (this.disabled_ = !1),
            (this.timerId_ = null),
            (this.onTick_ = this.onTick_.bind(this)),
            (this.doc_ = t),
            (this.emitter = new a()),
            (this.interval_ = e),
            this.setTimer_();
        }
        get disabled() {
            return this.disabled_;
        }
        set disabled(t) {
            (this.disabled_ = t),
            this.disabled_ ? this.clearTimer_() : this.setTimer_();
        }
        dispose() {
            this.clearTimer_();
        }
        clearTimer_() {
            if (null === this.timerId_) return;
            const t = this.doc_.defaultView;
            t && t.clearInterval(this.timerId_), (this.timerId_ = null);
        }
        setTimer_() {
            if ((this.clearTimer_(), this.interval_ <= 0)) return;
            const t = this.doc_.defaultView;
            t && (this.timerId_ = t.setInterval(this.onTick_, this.interval_));
        }
        onTick_() {
            this.disabled_ || this.emitter.emit("tick", { sender: this });
        }
    }
    class G {
        constructor(t) {
            this.constraints = t;
        }
        constrain(t) {
            return this.constraints.reduce((t, e) => e.constrain(t), t);
        }
    }

    function F(t, e) {
        if (t instanceof e) return t;
        if (t instanceof G) {
            const i = t.constraints.reduce(
                (t, i) => t || (i instanceof e ? i : null),
                null
            );
            if (i) return i;
        }
        return null;
    }
    class H {
        constructor(t) {
            (this.maxValue = t.max), (this.minValue = t.min);
        }
        constrain(t) {
            let e = t;
            return (
                n(this.minValue) || (e = Math.max(e, this.minValue)),
                n(this.maxValue) || (e = Math.min(e, this.maxValue)),
                e
            );
        }
    }
    class X {
        constructor(t) {
            this.step = t;
        }
        constrain(t) {
            return (
                (t < 0 ? -Math.round(-t / this.step) : Math.round(t / this.step)) *
                this.step
            );
        }
    }
    const Y = p("pop");
    class J {
        constructor(t, e) {
            (this.element = t.createElement("div")),
            this.element.classList.add(Y()),
                e.viewProps.bindClassModifiers(this.element),
                c(e.shows, u(this.element, Y(void 0, "v")));
        }
    }
    class W {
        constructor(t, e) {
            (this.shows = f(!1)),
            (this.viewProps = e.viewProps),
            (this.view = new J(t, {
                shows: this.shows,
                viewProps: this.viewProps,
            }));
        }
    }
    const Q = p("txt");
    class Z {
        constructor(t, e) {
            (this.onChange_ = this.onChange_.bind(this)),
            (this.element = t.createElement("div")),
            this.element.classList.add(Q()),
                e.viewProps.bindClassModifiers(this.element),
                (this.props_ = e.props),
                this.props_.emitter.on("change", this.onChange_);
            const i = t.createElement("input");
            i.classList.add(Q("i")),
                (i.type = "text"),
                e.viewProps.bindDisabled(i),
                this.element.appendChild(i),
                (this.inputElement = i),
                e.value.emitter.on("change", this.onChange_),
                (this.value_ = e.value),
                this.refresh();
        }
        refresh() {
            const t = this.props_.get("formatter");
            this.inputElement.value = t(this.value_.rawValue);
        }
        onChange_() {
            this.refresh();
        }
    }
    class tt {
        constructor(t, e) {
            (this.onInputChange_ = this.onInputChange_.bind(this)),
            (this.parser_ = e.parser),
            (this.props = e.props),
            (this.value = e.value),
            (this.viewProps = e.viewProps),
            (this.view = new Z(t, {
                props: e.props,
                value: this.value,
                viewProps: this.viewProps,
            })),
            this.view.inputElement.addEventListener("change", this.onInputChange_);
        }
        onInputChange_(t) {
            const e = t.currentTarget.value,
                i = this.parser_(e);
            n(i) || (this.value.rawValue = i), this.view.refresh();
        }
    }
    class et {
        constructor(t) {
            this.text = t;
        }
        evaluate() {
            return Number(this.text);
        }
        toString() {
            return this.text;
        }
    }
    const it = {
        "**": (t, e) => Math.pow(t, e),
        "*": (t, e) => t * e,
        "/": (t, e) => t / e,
        "%": (t, e) => t % e,
        "+": (t, e) => t + e,
        "-": (t, e) => t - e,
        "<<": (t, e) => t << e,
        ">>": (t, e) => t >> e,
        ">>>": (t, e) => t >>> e,
        "&": (t, e) => t & e,
        "^": (t, e) => t ^ e,
        "|": (t, e) => t | e,
    };
    class st {
        constructor(t, e, i) {
            (this.left = e), (this.operator = t), (this.right = i);
        }
        evaluate() {
            const t = it[this.operator];
            if (!t) throw new Error(`unexpected binary operator: '${this.operator}`);
            return t(this.left.evaluate(), this.right.evaluate());
        }
        toString() {
            return [
                "b(",
                this.left.toString(),
                this.operator,
                this.right.toString(),
                ")",
            ].join(" ");
        }
    }
    const nt = { "+": (t) => t, "-": (t) => -t, "~": (t) => ~t };
    class rt {
        constructor(t, e) {
            (this.operator = t), (this.expression = e);
        }
        evaluate() {
            const t = nt[this.operator];
            if (!t) throw new Error(`unexpected unary operator: '${this.operator}`);
            return t(this.expression.evaluate());
        }
        toString() {
            return ["u(", this.operator, this.expression.toString(), ")"].join(" ");
        }
    }

    function ot(t) {
        return (e, i) => {
            for (let s = 0; s < t.length; s++) {
                const n = t[s](e, i);
                if ("" !== n) return n;
            }
            return "";
        };
    }

    function at(t, e) {
        var i;
        const s = t.substr(e).match(/^\s+/);
        return null !== (i = s && s[0]) && void 0 !== i ? i : "";
    }

    function lt(t, e) {
        var i;
        const s = t.substr(e).match(/^[0-9]+/);
        return null !== (i = s && s[0]) && void 0 !== i ? i : "";
    }

    function pt(t, e) {
        const i = t.substr(e, 1);
        if (((e += 1), "e" !== i.toLowerCase())) return "";
        const s = (function(t, e) {
            const i = lt(t, e);
            if ("" !== i) return i;
            const s = t.substr(e, 1);
            if ("-" !== s && "+" !== s) return "";
            const n = lt(t, (e += 1));
            return "" === n ? "" : s + n;
        })(t, e);
        return "" === s ? "" : i + s;
    }

    function ht(t, e) {
        const i = t.substr(e, 1);
        if ("0" === i) return i;
        const s = (function(t, e) {
            const i = t.substr(e, 1);
            return i.match(/^[1-9]$/) ? i : "";
        })(t, e);
        return (e += s.length), "" === s ? "" : s + lt(t, e);
    }
    const ct = ot([
        function(t, e) {
            const i = ht(t, e);
            if (((e += i.length), "" === i)) return "";
            const s = t.substr(e, 1);
            if (((e += s.length), "." !== s)) return "";
            const n = lt(t, e);
            return i + s + n + pt(t, (e += n.length));
        },
        function(t, e) {
            const i = t.substr(e, 1);
            if (((e += i.length), "." !== i)) return "";
            const s = lt(t, e);
            return (e += s.length), "" === s ? "" : i + s + pt(t, e);
        },
        function(t, e) {
            const i = ht(t, e);
            return (e += i.length), "" === i ? "" : i + pt(t, e);
        },
    ]);
    const dt = ot([
            function(t, e) {
                const i = t.substr(e, 2);
                if (((e += i.length), "0b" !== i.toLowerCase())) return "";
                const s = (function(t, e) {
                    var i;
                    const s = t.substr(e).match(/^[01]+/);
                    return null !== (i = s && s[0]) && void 0 !== i ? i : "";
                })(t, e);
                return "" === s ? "" : i + s;
            },
            function(t, e) {
                const i = t.substr(e, 2);
                if (((e += i.length), "0o" !== i.toLowerCase())) return "";
                const s = (function(t, e) {
                    var i;
                    const s = t.substr(e).match(/^[0-7]+/);
                    return null !== (i = s && s[0]) && void 0 !== i ? i : "";
                })(t, e);
                return "" === s ? "" : i + s;
            },
            function(t, e) {
                const i = t.substr(e, 2);
                if (((e += i.length), "0x" !== i.toLowerCase())) return "";
                const s = (function(t, e) {
                    var i;
                    const s = t.substr(e).match(/^[0-9a-f]+/i);
                    return null !== (i = s && s[0]) && void 0 !== i ? i : "";
                })(t, e);
                return "" === s ? "" : i + s;
            },
        ]),
        ut = ot([dt, ct]);

    function vt(t, e) {
        return (
            (function(t, e) {
                const i = ut(t, e);
                return (
                    (e += i.length), "" === i ? null : { evaluable: new et(i), cursor: e }
                );
            })(t, e) ||
            (function(t, e) {
                const i = t.substr(e, 1);
                if (((e += i.length), "(" !== i)) return null;
                const s = gt(t, e);
                if (!s) return null;
                (e = s.cursor), (e += at(t, e).length);
                const n = t.substr(e, 1);
                return (
                    (e += n.length),
                    ")" !== n ? null : { evaluable: s.evaluable, cursor: e }
                );
            })(t, e)
        );
    }

    function bt(t, e, i) {
        i += at(e, i).length;
        const s = t.filter((t) => e.startsWith(t, i))[0];
        return s ?
            ((i += s.length), { cursor: (i += at(e, i).length), operator: s }) :
            null;
    }
    const mt = [
        ["**"],
        ["*", "/", "%"],
        ["+", "-"],
        ["<<", ">>>", ">>"],
        ["&"],
        ["^"],
        ["|"],
    ].reduce(
        (t, e) =>
        (function(t, e) {
            return (i, s) => {
                const n = t(i, s);
                if (!n) return null;
                s = n.cursor;
                let r = n.evaluable;
                for (;;) {
                    const n = bt(e, i, s);
                    if (!n) break;
                    s = n.cursor;
                    const o = t(i, s);
                    if (!o) return null;
                    (s = o.cursor), (r = new st(n.operator, r, o.evaluable));
                }
                return r ? { cursor: s, evaluable: r } : null;
            };
        })(t, e),
        function t(e, i) {
            const s = vt(e, i);
            if (s) return s;
            const n = e.substr(i, 1);
            if (((i += n.length), "+" !== n && "-" !== n && "~" !== n)) return null;
            const r = t(e, i);
            return r ?
                { cursor: (i = r.cursor), evaluable: new rt(n, r.evaluable) } :
                null;
        }
    );

    function gt(t, e) {
        return (e += at(t, e).length), mt(t, e);
    }

    function _t(t) {
        var e;
        const i = (function(t) {
            const e = gt(t, 0);
            return e ?
                e.cursor + at(t, e.cursor).length !== t.length ?
                null :
                e.evaluable :
                null;
        })(t);
        return null !== (e = null == i ? void 0 : i.evaluate()) && void 0 !== e ?
            e :
            null;
    }

    function ft(t) {
        if ("number" == typeof t) return t;
        if ("string" == typeof t) {
            const e = _t(t);
            if (!n(e)) return e;
        }
        return 0;
    }

    function wt(t) {
        return (e) => e.toFixed(Math.max(Math.min(t, 20), 0));
    }

    function xt(t, e) {
        for (; t.length < e;) t.push(void 0);
    }

    function yt(t) {
        const e = [];
        return xt(e, t), f(e);
    }

    function Ct(t) {
        const e = t.indexOf(void 0);
        return e < 0 ? t : t.slice(0, e);
    }

    function Et({ primary: t, secondary: e, forward: i, backward: s }) {
        let n = !1;

        function r(t) {
            n || ((n = !0), t(), (n = !1));
        }
        t.emitter.on("change", (s) => {
                r(() => {
                    e.setRawValue(i(t, e), s.options);
                });
            }),
            e.emitter.on("change", (n) => {
                r(() => {
                        t.setRawValue(s(t, e), n.options);
                    }),
                    r(() => {
                        e.setRawValue(i(t, e), n.options);
                    });
            }),
            r(() => {
                e.setRawValue(i(t, e), { forceEmit: !1, last: !0 });
            });
    }

    function kt(t, e) {
        const i = t * (e.altKey ? 0.1 : 1) * (e.shiftKey ? 10 : 1);
        return e.upKey ? +i : e.downKey ? -i : 0;
    }

    function Pt(t) {
        return {
            altKey: t.altKey,
            downKey: "ArrowDown" === t.key,
            shiftKey: t.shiftKey,
            upKey: "ArrowUp" === t.key,
        };
    }

    function Vt(t) {
        return {
            altKey: t.altKey,
            downKey: "ArrowLeft" === t.key,
            shiftKey: t.shiftKey,
            upKey: "ArrowRight" === t.key,
        };
    }

    function zt(t) {
        return (
            (function(t) {
                return "ArrowUp" === t || "ArrowDown" === t;
            })(t) ||
            "ArrowLeft" === t ||
            "ArrowRight" === t
        );
    }

    function Mt(t, e) {
        const i = e.ownerDocument.defaultView,
            s = e.getBoundingClientRect();
        return {
            x: t.pageX - (((i && i.scrollX) || 0) + s.left),
            y: t.pageY - (((i && i.scrollY) || 0) + s.top),
        };
    }
    class Lt {
        constructor(t) {
            (this.lastTouch_ = null),
            (this.onDocumentMouseMove_ = this.onDocumentMouseMove_.bind(this)),
            (this.onDocumentMouseUp_ = this.onDocumentMouseUp_.bind(this)),
            (this.onMouseDown_ = this.onMouseDown_.bind(this)),
            (this.onTouchEnd_ = this.onTouchEnd_.bind(this)),
            (this.onTouchMove_ = this.onTouchMove_.bind(this)),
            (this.onTouchStart_ = this.onTouchStart_.bind(this)),
            (this.elem_ = t),
            (this.emitter = new a()),
            t.addEventListener("touchstart", this.onTouchStart_),
                t.addEventListener("touchmove", this.onTouchMove_),
                t.addEventListener("touchend", this.onTouchEnd_),
                t.addEventListener("mousedown", this.onMouseDown_);
        }
        computePosition_(t) {
            const e = this.elem_.getBoundingClientRect();
            return {
                bounds: { width: e.width, height: e.height },
                point: t ? { x: t.x, y: t.y } : null,
            };
        }
        onMouseDown_(t) {
            var e;
            t.preventDefault(),
                null === (e = t.currentTarget) || void 0 === e || e.focus();
            const i = this.elem_.ownerDocument;
            i.addEventListener("mousemove", this.onDocumentMouseMove_),
                i.addEventListener("mouseup", this.onDocumentMouseUp_),
                this.emitter.emit("down", {
                    altKey: t.altKey,
                    data: this.computePosition_(Mt(t, this.elem_)),
                    sender: this,
                    shiftKey: t.shiftKey,
                });
        }
        onDocumentMouseMove_(t) {
            this.emitter.emit("move", {
                altKey: t.altKey,
                data: this.computePosition_(Mt(t, this.elem_)),
                sender: this,
                shiftKey: t.shiftKey,
            });
        }
        onDocumentMouseUp_(t) {
            const e = this.elem_.ownerDocument;
            e.removeEventListener("mousemove", this.onDocumentMouseMove_),
                e.removeEventListener("mouseup", this.onDocumentMouseUp_),
                this.emitter.emit("up", {
                    altKey: t.altKey,
                    data: this.computePosition_(Mt(t, this.elem_)),
                    sender: this,
                    shiftKey: t.shiftKey,
                });
        }
        onTouchStart_(t) {
            t.preventDefault();
            const e = t.targetTouches.item(0),
                i = this.elem_.getBoundingClientRect();
            this.emitter.emit("down", {
                    altKey: t.altKey,
                    data: this.computePosition_(
                        e ? { x: e.clientX - i.left, y: e.clientY - i.top } : void 0
                    ),
                    sender: this,
                    shiftKey: t.shiftKey,
                }),
                (this.lastTouch_ = e);
        }
        onTouchMove_(t) {
            const e = t.targetTouches.item(0),
                i = this.elem_.getBoundingClientRect();
            this.emitter.emit("move", {
                    altKey: t.altKey,
                    data: this.computePosition_(
                        e ? { x: e.clientX - i.left, y: e.clientY - i.top } : void 0
                    ),
                    sender: this,
                    shiftKey: t.shiftKey,
                }),
                (this.lastTouch_ = e);
        }
        onTouchEnd_(t) {
            var e;
            const i =
                null !== (e = t.targetTouches.item(0)) && void 0 !== e ?
                e :
                this.lastTouch_,
                s = this.elem_.getBoundingClientRect();
            this.emitter.emit("up", {
                altKey: t.altKey,
                data: this.computePosition_(
                    i ? { x: i.clientX - s.left, y: i.clientY - s.top } : void 0
                ),
                sender: this,
                shiftKey: t.shiftKey,
            });
        }
    }

    function Tt(t, e, i, s, n) {
        return s + ((t - e) / (i - e)) * (n - s);
    }

    function Dt(t) {
        return String(t.toFixed(10)).split(".")[1].replace(/0+$/, "").length;
    }

    function St(t, e, i) {
        return Math.min(Math.max(t, e), i);
    }
    const Kt = p("txt");
    class jt {
        constructor(t, e) {
            (this.onChange_ = this.onChange_.bind(this)),
            (this.props_ = e.props),
            this.props_.emitter.on("change", this.onChange_),
                (this.element = t.createElement("div")),
                this.element.classList.add(Kt(), Kt(void 0, "num")),
                e.arrayPosition &&
                this.element.classList.add(Kt(void 0, e.arrayPosition)),
                e.viewProps.bindClassModifiers(this.element);
            const i = t.createElement("input");
            i.classList.add(Kt("i")),
                (i.type = "text"),
                e.viewProps.bindDisabled(i),
                this.element.appendChild(i),
                (this.inputElement = i),
                (this.onDraggingChange_ = this.onDraggingChange_.bind(this)),
                (this.dragging_ = e.dragging),
                this.dragging_.emitter.on("change", this.onDraggingChange_),
                this.element.classList.add(Kt()),
                this.inputElement.classList.add(Kt("i"));
            const s = t.createElement("div");
            s.classList.add(Kt("k")),
                this.element.appendChild(s),
                (this.knobElement = s);
            const n = t.createElementNS(z, "svg");
            n.classList.add(Kt("g")), this.knobElement.appendChild(n);
            const r = t.createElementNS(z, "path");
            r.classList.add(Kt("gb")), n.appendChild(r), (this.guideBodyElem_ = r);
            const o = t.createElementNS(z, "path");
            o.classList.add(Kt("gh")), n.appendChild(o), (this.guideHeadElem_ = o);
            const a = t.createElement("div");
            a.classList.add(p("tt")()),
                this.knobElement.appendChild(a),
                (this.tooltipElem_ = a),
                e.value.emitter.on("change", this.onChange_),
                (this.value = e.value),
                this.refresh();
        }
        onDraggingChange_(t) {
            if (null === t.rawValue)
                return void this.element.classList.remove(Kt(void 0, "drg"));
            this.element.classList.add(Kt(void 0, "drg"));
            const e = t.rawValue / this.props_.get("draggingScale"),
                i = e + (e > 0 ? -1 : e < 0 ? 1 : 0),
                s = St(-i, -4, 4);
            this.guideHeadElem_.setAttributeNS(
                    null,
                    "d", [`M ${i + s},0 L${i},4 L${i + s},8`, `M ${e},-1 L${e},9`].join(" ")
                ),
                this.guideBodyElem_.setAttributeNS(null, "d", `M 0,4 L${e},4`);
            const n = this.props_.get("formatter");
            (this.tooltipElem_.textContent = n(this.value.rawValue)),
            (this.tooltipElem_.style.left = `${e}px`);
        }
        refresh() {
            const t = this.props_.get("formatter");
            this.inputElement.value = t(this.value.rawValue);
        }
        onChange_() {
            this.refresh();
        }
    }
    class Nt {
        constructor(t, e) {
            (this.originRawValue_ = 0),
            (this.onInputChange_ = this.onInputChange_.bind(this)),
            (this.onInputKeyDown_ = this.onInputKeyDown_.bind(this)),
            (this.onInputKeyUp_ = this.onInputKeyUp_.bind(this)),
            (this.onPointerDown_ = this.onPointerDown_.bind(this)),
            (this.onPointerMove_ = this.onPointerMove_.bind(this)),
            (this.onPointerUp_ = this.onPointerUp_.bind(this)),
            (this.baseStep_ = e.baseStep),
            (this.parser_ = e.parser),
            (this.props = e.props),
            (this.value = e.value),
            (this.viewProps = e.viewProps),
            (this.dragging_ = f(null)),
            (this.view = new jt(t, {
                arrayPosition: e.arrayPosition,
                dragging: this.dragging_,
                props: this.props,
                value: this.value,
                viewProps: this.viewProps,
            })),
            this.view.inputElement.addEventListener("change", this.onInputChange_),
                this.view.inputElement.addEventListener(
                    "keydown",
                    this.onInputKeyDown_
                ),
                this.view.inputElement.addEventListener("keyup", this.onInputKeyUp_);
            const i = new Lt(this.view.knobElement);
            i.emitter.on("down", this.onPointerDown_),
                i.emitter.on("move", this.onPointerMove_),
                i.emitter.on("up", this.onPointerUp_);
        }
        onInputChange_(t) {
            const e = t.currentTarget.value,
                i = this.parser_(e);
            n(i) || (this.value.rawValue = i), this.view.refresh();
        }
        onInputKeyDown_(t) {
            const e = kt(this.baseStep_, Pt(t));
            0 !== e &&
                this.value.setRawValue(this.value.rawValue + e, {
                    forceEmit: !1,
                    last: !1,
                });
        }
        onInputKeyUp_(t) {
            0 !== kt(this.baseStep_, Pt(t)) &&
                this.value.setRawValue(this.value.rawValue, {
                    forceEmit: !0,
                    last: !0,
                });
        }
        onPointerDown_() {
            (this.originRawValue_ = this.value.rawValue),
            (this.dragging_.rawValue = 0);
        }
        computeDraggingValue_(t) {
            if (!t.point) return null;
            const e = t.point.x - t.bounds.width / 2;
            return this.originRawValue_ + e * this.props.get("draggingScale");
        }
        onPointerMove_(t) {
            const e = this.computeDraggingValue_(t.data);
            null !== e &&
                (this.value.setRawValue(e, { forceEmit: !1, last: !1 }),
                    (this.dragging_.rawValue = this.value.rawValue - this.originRawValue_));
        }
        onPointerUp_(t) {
            const e = this.computeDraggingValue_(t.data);
            null !== e &&
                (this.value.setRawValue(e, { forceEmit: !0, last: !0 }),
                    (this.dragging_.rawValue = null));
        }
    }

    function Ot(t, e) {
        t.write(e);
    }

    function It(t) {
        const e = (function(t) {
            const e = t ? F(t, X) : null;
            return e ? e.step : null;
        })(t);
        return null != e ? e : 1;
    }

    function Rt(t, e) {
        var i;
        const s = t && F(t, X),
            n = Math.abs(
                null !== (i = null == s ? void 0 : s.step) && void 0 !== i ? i : e
            );
        return 0 === n ? 0.1 : Math.pow(10, Math.floor(Math.log10(n)) - 1);
    }
    class Ut {
        constructor(t) {
            (this.components = t.components), (this.asm_ = t.assembly);
        }
        constrain(t) {
            const e = this.asm_.toComponents(t).map((t, e) => {
                var i, s;
                return null !==
                    (s =
                        null === (i = this.components[e]) || void 0 === i ?
                        void 0 :
                        i.constrain(t)) && void 0 !== s ?
                    s :
                    t;
            });
            return this.asm_.fromComponents(e);
        }
    }
    const $t = p("pndtxt");
    class Bt {
        constructor(t, e) {
            (this.textViews = e.textViews),
            (this.element = t.createElement("div")),
            this.element.classList.add($t()),
                this.textViews.forEach((e) => {
                    const i = t.createElement("div");
                    i.classList.add($t("a")),
                        i.appendChild(e.element),
                        this.element.appendChild(i);
                });
        }
    }
    class qt {
        constructor(t, e) {
            (this.value = e.value),
            (this.viewProps = e.viewProps),
            (this.acs_ = e.axes.map((i, s) =>
                (function(t, e, i) {
                    return new Nt(t, {
                        arrayPosition: 0 === i ? "fst" : i === e.axes.length - 1 ? "lst" : "mid",
                        baseStep: e.axes[i].baseStep,
                        parser: e.parser,
                        props: e.axes[i].textProps,
                        value: f(0, { constraint: e.axes[i].constraint }),
                        viewProps: e.viewProps,
                    });
                })(t, e, s)
            )),
            this.acs_.forEach((t, i) => {
                    Et({
                        primary: this.value,
                        secondary: t.value,
                        forward: (t) => e.assembly.toComponents(t.rawValue)[i],
                        backward: (t, s) => {
                            const n = e.assembly.toComponents(t.rawValue);
                            return (n[i] = s.rawValue), e.assembly.fromComponents(n);
                        },
                    });
                }),
                (this.view = new Bt(t, { textViews: this.acs_.map((t) => t.view) }));
        }
    }
    const At = { defaultInterval: 200, defaultLineCount: 3 };
    class Gt {
        constructor() {
            (this.emitter = new a()), (this.index_ = -1);
        }
        get index() {
            return this.index_;
        }
        set index(t) {
            this.index_ !== t &&
                ((this.index_ = t),
                    this.emitter.emit("change", { index: t, sender: this }));
        }
    }
    const Ft = p("grl");
    class Ht {
        constructor(t, e) {
            (this.onCursorChange_ = this.onCursorChange_.bind(this)),
            (this.onValueUpdate_ = this.onValueUpdate_.bind(this)),
            (this.element = t.createElement("div")),
            this.element.classList.add(Ft()),
                e.viewProps.bindClassModifiers(this.element),
                (this.formatter_ = e.formatter),
                (this.minValue_ = e.minValue),
                (this.maxValue_ = e.maxValue),
                (this.cursor_ = e.cursor),
                this.cursor_.emitter.on("change", this.onCursorChange_);
            const i = t.createElementNS(z, "svg");
            i.classList.add(Ft("g")),
                (i.style.height = `calc(var(--bld-us) * ${e.lineCount})`),
                this.element.appendChild(i),
                (this.svgElem_ = i);
            const s = t.createElementNS(z, "polyline");
            this.svgElem_.appendChild(s), (this.lineElem_ = s);
            const n = t.createElement("div");
            n.classList.add(Ft("t"), p("tt")()),
                this.element.appendChild(n),
                (this.tooltipElem_ = n),
                e.value.emitter.on("change", this.onValueUpdate_),
                (this.value = e.value),
                this.update_();
        }
        get graphElement() {
            return this.svgElem_;
        }
        update_() {
            const t = this.svgElem_.getBoundingClientRect(),
                e = this.value.rawValue.length - 1,
                i = this.minValue_,
                s = this.maxValue_,
                n = [];
            this.value.rawValue.forEach((r, o) => {
                    if (void 0 === r) return;
                    const a = Tt(o, 0, e, 0, t.width),
                        l = Tt(r, i, s, t.height, 0);
                    n.push([a, l].join(","));
                }),
                this.lineElem_.setAttributeNS(null, "points", n.join(" "));
            const r = this.tooltipElem_,
                o = this.value.rawValue[this.cursor_.index];
            if (void 0 === o) return void r.classList.remove(Ft("t", "a"));
            const a = Tt(this.cursor_.index, 0, e, 0, t.width),
                l = Tt(o, i, s, t.height, 0);
            (r.style.left = `${a}px`),
            (r.style.top = `${l}px`),
            (r.textContent = `${this.formatter_(o)}`),
            r.classList.contains(Ft("t", "a")) ||
                (r.classList.add(Ft("t", "a"), Ft("t", "in")),
                    M(r),
                    r.classList.remove(Ft("t", "in")));
        }
        onValueUpdate_() {
            this.update_();
        }
        onCursorChange_() {
            this.update_();
        }
    }
    class Xt {
        constructor(t, e) {
            if (
                ((this.onGraphMouseMove_ = this.onGraphMouseMove_.bind(this)),
                    (this.onGraphMouseLeave_ = this.onGraphMouseLeave_.bind(this)),
                    (this.onGraphPointerDown_ = this.onGraphPointerDown_.bind(this)),
                    (this.onGraphPointerMove_ = this.onGraphPointerMove_.bind(this)),
                    (this.onGraphPointerUp_ = this.onGraphPointerUp_.bind(this)),
                    (this.value = e.value),
                    (this.viewProps = e.viewProps),
                    (this.cursor_ = new Gt()),
                    (this.view = new Ht(t, {
                        cursor: this.cursor_,
                        formatter: e.formatter,
                        lineCount: e.lineCount,
                        maxValue: e.maxValue,
                        minValue: e.minValue,
                        value: this.value,
                        viewProps: this.viewProps,
                    })),
                    L(t))
            ) {
                const t = new Lt(this.view.element);
                t.emitter.on("down", this.onGraphPointerDown_),
                    t.emitter.on("move", this.onGraphPointerMove_),
                    t.emitter.on("up", this.onGraphPointerUp_);
            } else this.view.element.addEventListener("mousemove", this.onGraphMouseMove_), this.view.element.addEventListener("mouseleave", this.onGraphMouseLeave_);
        }
        onGraphMouseLeave_() {
            this.cursor_.index = -1;
        }
        onGraphMouseMove_(t) {
            const e = this.view.element.getBoundingClientRect();
            this.cursor_.index = Math.floor(
                Tt(t.offsetX, 0, e.width, 0, this.value.rawValue.length)
            );
        }
        onGraphPointerDown_(t) {
            this.onGraphPointerMove_(t);
        }
        onGraphPointerMove_(t) {
            t.data.point ?
                (this.cursor_.index = Math.floor(
                    Tt(
                        t.data.point.x,
                        0,
                        t.data.bounds.width,
                        0,
                        this.value.rawValue.length
                    )
                )) :
                (this.cursor_.index = -1);
        }
        onGraphPointerUp_() {
            this.cursor_.index = -1;
        }
    }
    class Yt {
        constructor(t) {
            this.controller_ = t;
        }
        get disabled() {
            return this.controller_.viewProps.get("disabled");
        }
        set disabled(t) {
            this.controller_.viewProps.set("disabled", t);
        }
        get title() {
            var t;
            return null !== (t = this.controller_.props.get("title")) && void 0 !== t ?
                t :
                "";
        }
        set title(t) {
            this.controller_.props.set("title", t);
        }
        on(t, e) {
            const s = e.bind(this);
            return (
                this.controller_.emitter.on(t, () => {
                    s(new i(this));
                }),
                this
            );
        }
    }
    class Jt extends i {
        constructor(t, e, i) {
            super(t), (this.cell = e), (this.index = i);
        }
    }
    class Wt extends e {
        constructor(t) {
            super(t), (this.cellToApiMap_ = new Map()), (this.emitter_ = new a());
            const e = this.controller_.valueController;
            e.cellControllers.forEach((t, i) => {
                const s = new Yt(t);
                this.cellToApiMap_.set(t, s),
                    t.emitter.on("click", () => {
                        const t = i % e.size[0],
                            n = Math.floor(i / e.size[0]);
                        this.emitter_.emit("click", { event: new Jt(this, s, [t, n]) });
                    });
            });
        }
        cell(t, e) {
            const i = this.controller_.valueController,
                s = i.cellControllers[e * i.size[0] + t];
            return this.cellToApiMap_.get(s);
        }
        on(t, e) {
            const i = e.bind(this);
            return (
                this.emitter_.on(t, (t) => {
                    i(t.event);
                }),
                this
            );
        }
    }
    class Qt {
        constructor(t, e) {
            this.size = e.size;
            const [i, s] = this.size,
                n = [];
            for (let r = 0; r < s; r++)
                for (let s = 0; s < i; s++) {
                    const i = new m(t, {
                        props: w.fromObject(Object.assign({}, e.cellConfig(s, r))),
                        viewProps: B.create(),
                    });
                    n.push(i);
                }
                (this.cellCs_ = n),
                (this.viewProps = B.create()),
                this.viewProps.handleDispose(() => {
                    this.cellCs_.forEach((t) => {
                        t.viewProps.set("disposed", !0);
                    });
                }),
                (this.view = new I(t, {
                    viewProps: this.viewProps,
                    viewName: "btngrid",
                })),
                (this.view.element.style.gridTemplateColumns = `repeat(${i}, 1fr)`),
                this.cellCs_.forEach((t) => {
                    this.view.element.appendChild(t.view.element);
                });
        }
        get cellControllers() {
            return this.cellCs_;
        }
    }
    const Zt = {
        id: "buttongrid",
        type: "blade",
        css: ".tp-cbzv_b,.tp-rslv_k,.tp-radv_b,.tp-cbzgv{-webkit-appearance:none;-moz-appearance:none;appearance:none;background-color:transparent;border-width:0;font-family:inherit;font-size:inherit;font-weight:inherit;margin:0;outline:none;padding:0}.tp-cbzv_b,.tp-rslv_k,.tp-radv_b{background-color:var(--btn-bg);border-radius:var(--elm-br);color:var(--btn-fg);cursor:pointer;display:block;font-weight:bold;height:var(--bld-us);line-height:var(--bld-us);overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.tp-cbzv_b:hover,.tp-rslv_k:hover,.tp-radv_b:hover{background-color:var(--btn-bg-h)}.tp-cbzv_b:focus,.tp-rslv_k:focus,.tp-radv_b:focus{background-color:var(--btn-bg-f)}.tp-cbzv_b:active,.tp-rslv_k:active,.tp-radv_b:active{background-color:var(--btn-bg-a)}.tp-cbzv_b:disabled,.tp-rslv_k:disabled,.tp-radv_b:disabled{opacity:0.5}.tp-cbzgv{background-color:var(--in-bg);border-radius:var(--elm-br);box-sizing:border-box;color:var(--in-fg);font-family:inherit;height:var(--bld-us);line-height:var(--bld-us);min-width:0;width:100%}.tp-cbzgv:hover{background-color:var(--in-bg-h)}.tp-cbzgv:focus{background-color:var(--in-bg-f)}.tp-cbzgv:active{background-color:var(--in-bg-a)}.tp-cbzgv:disabled{opacity:0.5}.tp-btngridv{border-radius:var(--elm-br);display:grid;overflow:hidden;gap:2px}.tp-btngridv.tp-v-disabled{opacity:0.5}.tp-btngridv .tp-btnv_b:disabled{opacity:1}.tp-btngridv .tp-btnv_b:disabled .tp-btnv_t{opacity:0.5}.tp-btngridv .tp-btnv_b{border-radius:0}.tp-cbzv{position:relative}.tp-cbzv_h{display:flex}.tp-cbzv_b{margin-right:4px;position:relative;width:var(--bld-us)}.tp-cbzv_b svg{display:block;height:16px;left:50%;margin-left:-8px;margin-top:-8px;position:absolute;top:50%;width:16px}.tp-cbzv_b svg path{stroke:var(--bs-bg);stroke-width:2}.tp-cbzv_t{flex:1}.tp-cbzv_p{height:0;margin-top:0;opacity:0;overflow:hidden;transition:height .2s ease-in-out,opacity .2s linear,margin .2s ease-in-out}.tp-cbzv.tp-cbzv-expanded .tp-cbzv_p{margin-top:var(--bld-s);opacity:1}.tp-cbzv.tp-cbzv-cpl .tp-cbzv_p{overflow:visible}.tp-cbzv .tp-popv{left:calc(-1 * var(--cnt-h-p));position:absolute;right:calc(-1 * var(--cnt-h-p));top:var(--bld-us)}.tp-cbzpv_t{margin-top:var(--bld-s)}.tp-cbzgv{height:auto;overflow:hidden;position:relative}.tp-cbzgv.tp-v-disabled{opacity:0.5}.tp-cbzgv_p{left:16px;position:absolute;right:16px;top:0}.tp-cbzgv_g{cursor:pointer;display:block;height:calc(var(--bld-us) * 5);width:100%}.tp-cbzgv_u{opacity:0.1;stroke:var(--in-fg);stroke-dasharray:1}.tp-cbzgv_l{fill:transparent;stroke:var(--in-fg)}.tp-cbzgv_v{opacity:0.5;stroke:var(--in-fg);stroke-dasharray:1}.tp-cbzgv_h{border:var(--in-fg) solid 1px;border-radius:50%;box-sizing:border-box;height:4px;margin-left:-2px;margin-top:-2px;pointer-events:none;position:absolute;width:4px}.tp-cbzgv:focus .tp-cbzgv_h-sel{background-color:var(--in-fg);border-width:0}.tp-cbzprvv{cursor:pointer;height:4px;padding:4px 0;position:relative}.tp-cbzprvv_g{display:block;height:100%;overflow:visible;width:100%}.tp-cbzprvv_t{opacity:0.5;stroke:var(--mo-fg)}.tp-cbzprvv_m{background-color:var(--mo-fg);border-radius:50%;height:4px;margin-left:-2px;margin-top:-2px;opacity:0;position:absolute;top:50%;transition:opacity 0.2s ease-out;width:4px}.tp-cbzprvv_m.tp-cbzprvv_m-a{opacity:1}.tp-fpsv{position:relative}.tp-fpsv_l{bottom:4px;color:var(--mo-fg);line-height:1;right:4px;pointer-events:none;position:absolute}.tp-fpsv_u{margin-left:0.2em;opacity:0.7}.tp-rslv{cursor:pointer;padding-left:8px;padding-right:8px}.tp-rslv.tp-v-disabled{opacity:0.5}.tp-rslv_t{height:calc(var(--bld-us));position:relative}.tp-rslv_t::before{background-color:var(--in-bg);border-radius:1px;content:'';height:2px;margin-top:-1px;position:absolute;top:50%;left:-4px;right:-4px}.tp-rslv_b{bottom:0;top:0;position:absolute}.tp-rslv_b::before{background-color:var(--in-fg);content:'';height:2px;margin-top:-1px;position:absolute;top:50%;left:0;right:0}.tp-rslv_k{height:calc(var(--bld-us) - 8px);margin-top:calc((var(--bld-us) - 8px) / -2);position:absolute;top:50%;width:8px}.tp-rslv_k.tp-rslv_k-min{margin-left:-8px}.tp-rslv_k.tp-rslv_k-max{margin-left:0}.tp-rslv.tp-rslv-zero .tp-rslv_k.tp-rslv_k-min{border-bottom-right-radius:0;border-top-right-radius:0}.tp-rslv.tp-rslv-zero .tp-rslv_k.tp-rslv_k-max{border-bottom-left-radius:0;border-top-left-radius:0}.tp-rsltxtv{display:flex}.tp-rsltxtv_s{flex:1}.tp-rsltxtv_t{flex:1;margin-left:4px}.tp-radv_l{display:block;position:relative}.tp-radv_i{left:0;opacity:0;position:absolute;top:0}.tp-radv_b{opacity:0.5}.tp-radv_i:hover+.tp-radv_b{background-color:var(--btn-bg-h)}.tp-radv_i:focus+.tp-radv_b{background-color:var(--btn-bg-f)}.tp-radv_i:active+.tp-radv_b{background-color:var(--btn-bg-a)}.tp-radv_i:checked+.tp-radv_b{opacity:1}.tp-radv_t{bottom:0;color:inherit;left:0;overflow:hidden;position:absolute;right:0;text-align:center;text-overflow:ellipsis;top:0}.tp-radv_i:disabled+.tp-radv_b>.tp-radv_t{opacity:0.5}.tp-radgridv{border-radius:var(--elm-br);display:grid;overflow:hidden;gap:2px}.tp-radgridv.tp-v-disabled{opacity:0.5}.tp-radgridv .tp-radv_b{border-radius:0}",
        accept(t) {
            const e = C,
                i = E(t, {
                    cells: e.required.function,
                    size: e.required.array(e.required.number),
                    view: e.required.constant("buttongrid"),
                    label: e.optional.string,
                });
            return i ? { params: i } : null;
        },
        controller: (t) =>
            new S(t.document, {
                blade: t.blade,
                props: w.fromObject({ label: t.params.label }),
                valueController: new Qt(t.document, {
                    cellConfig: t.params.cells,
                    size: t.params.size,
                }),
            }),
        api: (t) =>
            t.controller instanceof S && t.controller.valueController instanceof Qt ?
            new Wt(t.controller) :
            null,
    };
    class te extends e {
        get label() {
            return this.controller_.props.get("label");
        }
        set label(t) {
            this.controller_.props.set("label", t);
        }
        get value() {
            return this.controller_.valueController.value.rawValue;
        }
        set value(t) {
            this.controller_.valueController.value.rawValue = t;
        }
        on(t, e) {
            const i = e.bind(this);
            return (
                this.controller_.valueController.value.emitter.on(t, (t) => {
                    i(new s(this, t.rawValue, void 0, t.options.last));
                }),
                this
            );
        }
    }

    function ee(t, e, i) {
        return t * (1 - i) + e * i;
    }

    function ie(t, e) {
        let i = 0.25,
            s = 0.5,
            n = -1;
        for (let r = 0; r < 20; r++) {
            const [r, o] = t.curve(s);
            if (
                ((s += i * (r < e ? 1 : -1)),
                    (n = o),
                    (i *= 0.5),
                    Math.abs(e - r) < 0.001)
            )
                break;
        }
        return n;
    }
    class se {
        constructor(t = 0, e = 0, i = 1, s = 1) {
            (this.cache_ = []), (this.comps_ = [t, e, i, s]);
        }
        get x1() {
            return this.comps_[0];
        }
        get y1() {
            return this.comps_[1];
        }
        get x2() {
            return this.comps_[2];
        }
        get y2() {
            return this.comps_[3];
        }
        static isObject(t) {
            return (!n(t) &&
                !!Array.isArray(t) &&
                "number" == typeof t[0] &&
                "number" == typeof t[1] &&
                "number" == typeof t[2] &&
                "number" == typeof t[3]
            );
        }
        static equals(t, e) {
            return t.x1 === e.x1 && t.y1 === e.y1 && t.x2 === e.x2 && t.y2 === e.y2;
        }
        curve(t) {
            const e = ee(0, this.x1, t),
                i = ee(0, this.y1, t),
                s = ee(this.x1, this.x2, t),
                n = ee(this.y1, this.y2, t),
                r = ee(this.x2, 1, t),
                o = ee(this.y2, 1, t),
                a = ee(e, s, t),
                l = ee(i, n, t),
                p = ee(s, r, t),
                h = ee(n, o, t);
            return [ee(a, p, t), ee(l, h, t)];
        }
        y(t) {
            if (0 === this.cache_.length) {
                const t = [];
                for (let e = 0; e < 100; e++) t.push(ie(this, Tt(e, 0, 99, 0, 1)));
                this.cache_ = t;
            }
            return this.cache_[Math.round(Tt(St(t, 0, 1), 0, 1, 0, 99))];
        }
        toObject() {
            return [this.comps_[0], this.comps_[1], this.comps_[2], this.comps_[3]];
        }
    }
    const ne = {
        toComponents: (t) => t.toObject(),
        fromComponents: (t) => new se(...t),
    };

    function re(t) {
        const e = wt(2);
        return `cubic-bezier(${t
      .toObject()
      .map((t) => e(t))
      .join(", ")})`;
    }
    const oe = [0, 0.5, 0.5, 1];

    function ae(t) {
        const e = t.match(
            /^cubic-bezier\s*\(\s*([0-9.]+)\s*,\s*([0-9.]+)\s*,\s*([0-9.]+)\s*,\s*([0-9.]+)\s*\)$/
        );
        if (!e) return new se(...oe);
        const i = [e[1], e[2], e[3], e[4]].reduce((t, e) => {
            if (!t) return null;
            const i = Number(e);
            return isNaN(i) ? null : [...t, i];
        }, []);
        return new se(...(null != i ? i : oe));
    }
    const le = p("cbz");
    class pe {
        constructor(t, e) {
            (this.element = t.createElement("div")),
            this.element.classList.add(le()),
                e.viewProps.bindClassModifiers(this.element),
                e.foldable.bindExpandedClass(this.element, le(void 0, "expanded")),
                d(e.foldable, "completed", u(this.element, le(void 0, "cpl")));
            const i = t.createElement("div");
            i.classList.add(le("h")), this.element.appendChild(i);
            const s = t.createElement("button");
            s.classList.add(le("b")), e.viewProps.bindDisabled(s);
            const n = t.createElementNS(z, "svg");
            (n.innerHTML = '<path d="M2 13C8 13 8 3 14 3"/>'),
            s.appendChild(n),
                i.appendChild(s),
                (this.buttonElement = s);
            const r = t.createElement("div");
            if (
                (r.classList.add(le("t")),
                    i.appendChild(r),
                    (this.textElement = r),
                    "inline" === e.pickerLayout)
            ) {
                const e = t.createElement("div");
                e.classList.add(le("p")),
                    this.element.appendChild(e),
                    (this.pickerElement = e);
            } else this.pickerElement = null;
        }
    }
    const he = p("cbzp");
    class ce {
        constructor(t, e) {
            (this.element = t.createElement("div")),
            this.element.classList.add(he()),
                e.viewProps.bindClassModifiers(this.element);
            const i = t.createElement("div");
            i.classList.add(he("g")),
                this.element.appendChild(i),
                (this.graphElement = i);
            const s = t.createElement("div");
            s.classList.add(he("t")),
                this.element.appendChild(s),
                (this.textElement = s);
        }
    }

    function de(t, e) {
        const i = new MutationObserver((t) => {
                for (const s of t)
                    "childList" === s.type &&
                    s.addedNodes.forEach((t) => {
                        t.contains(t) && (e(), i.disconnect());
                    });
            }),
            s = t.ownerDocument;
        i.observe(s.body, { attributes: !0, childList: !0, subtree: !0 });
    }
    const ue = p("cbzg");
    class ve {
        constructor(t, e) {
            (this.element = t.createElement("div")),
            this.element.classList.add(ue()),
                e.viewProps.bindClassModifiers(this.element),
                e.viewProps.bindTabIndex(this.element);
            const i = t.createElement("div");
            i.classList.add(ue("p")),
                this.element.appendChild(i),
                (this.previewElement = i);
            const s = t.createElementNS(z, "svg");
            s.classList.add(ue("g")),
                this.element.appendChild(s),
                (this.svgElem_ = s);
            const n = t.createElementNS(z, "path");
            n.classList.add(ue("u")),
                this.svgElem_.appendChild(n),
                (this.guideElem_ = n);
            const r = t.createElementNS(z, "polyline");
            r.classList.add(ue("l")),
                this.svgElem_.appendChild(r),
                (this.lineElem_ = r),
                (this.handleElems_ = [t.createElement("div"), t.createElement("div")]),
                this.handleElems_.forEach((t) => {
                    t.classList.add(ue("h")), this.element.appendChild(t);
                }),
                (this.vectorElems_ = [
                    t.createElementNS(z, "line"),
                    t.createElementNS(z, "line"),
                ]),
                this.vectorElems_.forEach((t) => {
                    t.classList.add(ue("v")), this.svgElem_.appendChild(t);
                }),
                (this.value_ = e.value),
                this.value_.emitter.on("change", this.onValueChange_.bind(this)),
                (this.sel_ = e.selection),
                this.handleElems_.forEach((t, e) => {
                    var i, s;
                    c(
                        this.sel_,
                        ((i = (t) => t === e), (s = u(t, ue("h", "sel"))), (t) => s(i(t)))
                    );
                }),
                de(this.element, () => {
                    this.refresh();
                });
        }
        getVertMargin_(t) {
            return 0.25 * t;
        }
        valueToPosition(t, e) {
            const i = this.element.getBoundingClientRect(),
                s = i.width,
                n = i.height,
                r = this.getVertMargin_(n);
            return { x: Tt(t, 0, 1, 0, s), y: Tt(e, 0, 1, n - r, r) };
        }
        positionToValue(t, e) {
            const i = this.element.getBoundingClientRect(),
                s = i.width,
                n = i.height,
                r = this.getVertMargin_(n);
            return { x: St(Tt(t, 0, s, 0, 1), 0, 1), y: Tt(e, n - r, r, 0, 1) };
        }
        refresh() {
            this.guideElem_.setAttributeNS(
                null,
                "d", [0, 1]
                .map((t) => {
                    const e = this.valueToPosition(0, t),
                        i = this.valueToPosition(1, t);
                    return [`M ${e.x},${e.y}`, `L ${i.x},${i.y}`].join(" ");
                })
                .join(" ")
            );
            const t = this.value_.rawValue,
                e = [];
            let i = 0;
            for (;;) {
                const s = this.valueToPosition(...t.curve(i));
                if ((e.push([s.x, s.y].join(",")), i >= 1)) break;
                i = Math.min(i + 0.05, 1);
            }
            this.lineElem_.setAttributeNS(null, "points", e.join(" "));
            const s = t.toObject();
            [0, 1].forEach((t) => {
                const e = this.valueToPosition(t, t),
                    i = this.valueToPosition(s[2 * t], s[2 * t + 1]),
                    n = this.vectorElems_[t];
                n.setAttributeNS(null, "x1", String(e.x)),
                    n.setAttributeNS(null, "y1", String(e.y)),
                    n.setAttributeNS(null, "x2", String(i.x)),
                    n.setAttributeNS(null, "y2", String(i.y));
                const r = this.handleElems_[t];
                (r.style.left = `${i.x}px`), (r.style.top = `${i.y}px`);
            });
        }
        onValueChange_() {
            this.refresh();
        }
    }
    const be = p("cbzprv");
    class me {
        constructor(t, e) {
            (this.stopped_ = !0),
            (this.startTime_ = -1),
            (this.onDispose_ = this.onDispose_.bind(this)),
            (this.onTimer_ = this.onTimer_.bind(this)),
            (this.onValueChange_ = this.onValueChange_.bind(this)),
            (this.element = t.createElement("div")),
            this.element.classList.add(be()),
                e.viewProps.bindClassModifiers(this.element);
            const i = t.createElementNS(z, "svg");
            i.classList.add(be("g")),
                this.element.appendChild(i),
                (this.svgElem_ = i);
            const s = t.createElementNS(z, "path");
            s.classList.add(be("t")),
                this.svgElem_.appendChild(s),
                (this.ticksElem_ = s);
            const n = t.createElement("div");
            n.classList.add(be("m")),
                this.element.appendChild(n),
                (this.markerElem_ = n),
                (this.value_ = e.value),
                this.value_.emitter.on("change", this.onValueChange_),
                e.viewProps.handleDispose(this.onDispose_),
                de(this.element, () => {
                    this.refresh();
                });
        }
        play() {
            this.stop(),
                this.updateMarker_(0),
                this.markerElem_.classList.add(be("m", "a")),
                (this.startTime_ = new Date().getTime() + 400),
                (this.stopped_ = !1),
                requestAnimationFrame(this.onTimer_);
        }
        stop() {
            (this.stopped_ = !0), this.markerElem_.classList.remove(be("m", "a"));
        }
        onDispose_() {
            this.stop();
        }
        updateMarker_(t) {
            const e = this.value_.rawValue.y(St(t, 0, 1));
            this.markerElem_.style.left = 100 * e + "%";
        }
        refresh() {
            const t = this.svgElem_.getBoundingClientRect(),
                e = t.width,
                i = t.height,
                s = [],
                n = this.value_.rawValue;
            for (let t = 0; t < 24; t++) {
                const r = Tt(t, 0, 23, 0, 1),
                    o = Tt(n.y(r), 0, 1, 0, e);
                s.push(`M ${o},0 v${i}`);
            }
            this.ticksElem_.setAttributeNS(null, "d", s.join(" "));
        }
        onTimer_() {
            if (null === this.startTime_) return;
            const t = new Date().getTime() - this.startTime_,
                e = t / 1e3;
            this.updateMarker_(e),
                t > 1400 && this.stop(),
                this.stopped_ || requestAnimationFrame(this.onTimer_);
        }
        onValueChange_() {
            this.refresh(), this.play();
        }
    }

    function ge(t, e, i, s) {
        const n = i - t,
            r = s - e;
        return Math.sqrt(n * n + r * r);
    }
    class _e {
        constructor(t, e) {
            (this.onKeyDown_ = this.onKeyDown_.bind(this)),
            (this.onKeyUp_ = this.onKeyUp_.bind(this)),
            (this.onPointerDown_ = this.onPointerDown_.bind(this)),
            (this.onPointerMove_ = this.onPointerMove_.bind(this)),
            (this.onPointerUp_ = this.onPointerUp_.bind(this)),
            (this.baseStep_ = e.baseStep),
            (this.value = e.value),
            (this.sel_ = f(0)),
            (this.viewProps = e.viewProps),
            (this.view = new ve(t, {
                selection: this.sel_,
                value: this.value,
                viewProps: this.viewProps,
            })),
            this.view.element.addEventListener("keydown", this.onKeyDown_),
                this.view.element.addEventListener("keyup", this.onKeyUp_),
                (this.prevView_ = new me(t, {
                    value: this.value,
                    viewProps: this.viewProps,
                })),
                this.prevView_.element.addEventListener("mousedown", (t) => {
                    t.stopImmediatePropagation(),
                        t.preventDefault(),
                        this.prevView_.play();
                }),
                this.view.previewElement.appendChild(this.prevView_.element);
            const i = new Lt(this.view.element);
            i.emitter.on("down", this.onPointerDown_),
                i.emitter.on("move", this.onPointerMove_),
                i.emitter.on("up", this.onPointerUp_);
        }
        refresh() {
            this.view.refresh(), this.prevView_.refresh(), this.prevView_.play();
        }
        updateValue_(t, e, i) {
            const s = this.sel_.rawValue,
                n = this.value.rawValue.toObject(),
                r = this.view.positionToValue(t.x, t.y),
                o = e ?
                (function(t, e, i, s) {
                    const n = ge(t, e, i, s),
                        r = Math.atan2(s - e, i - t),
                        o = (Math.round(r / (Math.PI / 4)) * Math.PI) / 4;
                    return { x: t + Math.cos(o) * n, y: e + Math.sin(o) * n };
                })(s, s, r.x, r.y) :
                r;
            (n[2 * s] = o.x),
            (n[2 * s + 1] = o.y),
            this.value.setRawValue(new se(...n), i);
        }
        onPointerDown_(t) {
            const e = t.data;
            if (!e.point) return;
            const i = this.value.rawValue,
                s = this.view.valueToPosition(i.x1, i.y1),
                n = ge(e.point.x, e.point.y, s.x, s.y),
                r = this.view.valueToPosition(i.x2, i.y2),
                o = ge(e.point.x, e.point.y, r.x, r.y);
            (this.sel_.rawValue = n <= o ? 0 : 1),
            this.updateValue_(e.point, t.shiftKey, { forceEmit: !1, last: !1 });
        }
        onPointerMove_(t) {
            const e = t.data;
            e.point &&
                this.updateValue_(e.point, t.shiftKey, { forceEmit: !1, last: !1 });
        }
        onPointerUp_(t) {
            const e = t.data;
            e.point &&
                this.updateValue_(e.point, t.shiftKey, { forceEmit: !0, last: !0 });
        }
        onKeyDown_(t) {
            zt(t.key) && t.preventDefault();
            const e = this.sel_.rawValue,
                i = this.value.rawValue.toObject();
            (i[2 * e] += kt(this.baseStep_, Vt(t))),
            (i[2 * e + 1] += kt(this.baseStep_, Pt(t))),
            this.value.setRawValue(new se(...i), { forceEmit: !1, last: !1 });
        }
        onKeyUp_(t) {
            zt(t.key) && t.preventDefault();
            const e = kt(this.baseStep_, Vt(t)),
                i = kt(this.baseStep_, Pt(t));
            (0 === e && 0 === i) ||
            this.value.setRawValue(this.value.rawValue, {
                forceEmit: !0,
                last: !0,
            });
        }
    }
    class fe {
        constructor(t, e) {
            (this.value = e.value),
            (this.viewProps = e.viewProps),
            (this.view = new ce(t, { viewProps: this.viewProps })),
            (this.gc_ = new _e(t, {
                baseStep: e.axis.baseStep,
                value: this.value,
                viewProps: this.viewProps,
            })),
            this.view.graphElement.appendChild(this.gc_.view.element);
            const i = Object.assign(Object.assign({}, e.axis), {
                    constraint: new H({ max: 1, min: 0 }),
                }),
                s = Object.assign(Object.assign({}, e.axis), { constraint: void 0 });
            (this.tc_ = new qt(t, {
                assembly: ne,
                axes: [i, s, i, s],
                parser: _t,
                value: this.value,
                viewProps: this.viewProps,
            })),
            this.view.textElement.appendChild(this.tc_.view.element);
        }
        get allFocusableElements() {
            return [
                this.gc_.view.element,
                ...this.tc_.view.textViews.map((t) => t.inputElement),
            ];
        }
        refresh() {
            this.gc_.refresh();
        }
    }
    class we {
        constructor(t, e) {
            var i;
            (this.onButtonBlur_ = this.onButtonBlur_.bind(this)),
            (this.onButtonClick_ = this.onButtonClick_.bind(this)),
            (this.onPopupChildBlur_ = this.onPopupChildBlur_.bind(this)),
            (this.onPopupChildKeydown_ = this.onPopupChildKeydown_.bind(this)),
            (this.value = e.value),
            (this.viewProps = e.viewProps),
            (this.foldable_ = ((i = e.expanded), j.create(i))),
            (this.view = new pe(t, {
                foldable: this.foldable_,
                pickerLayout: e.pickerLayout,
                viewProps: this.viewProps,
            })),
            this.view.buttonElement.addEventListener("blur", this.onButtonBlur_),
                this.view.buttonElement.addEventListener("click", this.onButtonClick_),
                (this.tc_ = new tt(t, {
                    parser: ae,
                    props: w.fromObject({ formatter: re }),
                    value: this.value,
                    viewProps: this.viewProps,
                })),
                this.view.textElement.appendChild(this.tc_.view.element),
                (this.popC_ =
                    "popup" === e.pickerLayout ?
                    new W(t, { viewProps: this.viewProps }) :
                    null);
            const s = new fe(t, {
                axis: e.axis,
                value: this.value,
                viewProps: this.viewProps,
            });
            s.allFocusableElements.forEach((t) => {
                    t.addEventListener("blur", this.onPopupChildBlur_),
                        t.addEventListener("keydown", this.onPopupChildKeydown_);
                }),
                (this.pickerC_ = s),
                this.popC_ ?
                (this.view.element.appendChild(this.popC_.view.element),
                    this.popC_.view.element.appendChild(this.pickerC_.view.element),
                    c(this.popC_.shows, (t) => {
                        t && s.refresh();
                    }),
                    Et({
                        primary: this.foldable_.value("expanded"),
                        secondary: this.popC_.shows,
                        forward: (t) => t.rawValue,
                        backward: (t, e) => e.rawValue,
                    })) :
                this.view.pickerElement &&
                (this.view.pickerElement.appendChild(this.pickerC_.view.element),
                    O(this.foldable_, this.view.pickerElement));
        }
        onButtonBlur_(t) {
            if (!this.popC_) return;
            const e = t.relatedTarget;
            (e && this.popC_.view.element.contains(e)) ||
            (this.popC_.shows.rawValue = !1);
        }
        onButtonClick_() {
            this.foldable_.set("expanded", !this.foldable_.get("expanded")),
                this.foldable_.get("expanded") &&
                this.pickerC_.allFocusableElements[0].focus();
        }
        onPopupChildBlur_(t) {
            if (!this.popC_) return;
            const e = this.popC_.view.element,
                i = (function(t) {
                    return t.relatedTarget ?
                        t.relatedTarget :
                        "explicitOriginalTarget" in t ?
                        t.explicitOriginalTarget :
                        null;
                })(t);
            (i && e.contains(i)) ||
            (i && i === this.view.buttonElement && !L(e.ownerDocument)) ||
            (this.popC_.shows.rawValue = !1);
        }
        onPopupChildKeydown_(t) {
            this.popC_ && "Escape" === t.key && (this.popC_.shows.rawValue = !1);
        }
    }
    const xe = {
        id: "cubic-bezier",
        type: "blade",
        css: ".tp-cbzv_b,.tp-rslv_k,.tp-radv_b,.tp-cbzgv{-webkit-appearance:none;-moz-appearance:none;appearance:none;background-color:transparent;border-width:0;font-family:inherit;font-size:inherit;font-weight:inherit;margin:0;outline:none;padding:0}.tp-cbzv_b,.tp-rslv_k,.tp-radv_b{background-color:var(--btn-bg);border-radius:var(--elm-br);color:var(--btn-fg);cursor:pointer;display:block;font-weight:bold;height:var(--bld-us);line-height:var(--bld-us);overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.tp-cbzv_b:hover,.tp-rslv_k:hover,.tp-radv_b:hover{background-color:var(--btn-bg-h)}.tp-cbzv_b:focus,.tp-rslv_k:focus,.tp-radv_b:focus{background-color:var(--btn-bg-f)}.tp-cbzv_b:active,.tp-rslv_k:active,.tp-radv_b:active{background-color:var(--btn-bg-a)}.tp-cbzv_b:disabled,.tp-rslv_k:disabled,.tp-radv_b:disabled{opacity:0.5}.tp-cbzgv{background-color:var(--in-bg);border-radius:var(--elm-br);box-sizing:border-box;color:var(--in-fg);font-family:inherit;height:var(--bld-us);line-height:var(--bld-us);min-width:0;width:100%}.tp-cbzgv:hover{background-color:var(--in-bg-h)}.tp-cbzgv:focus{background-color:var(--in-bg-f)}.tp-cbzgv:active{background-color:var(--in-bg-a)}.tp-cbzgv:disabled{opacity:0.5}.tp-btngridv{border-radius:var(--elm-br);display:grid;overflow:hidden;gap:2px}.tp-btngridv.tp-v-disabled{opacity:0.5}.tp-btngridv .tp-btnv_b:disabled{opacity:1}.tp-btngridv .tp-btnv_b:disabled .tp-btnv_t{opacity:0.5}.tp-btngridv .tp-btnv_b{border-radius:0}.tp-cbzv{position:relative}.tp-cbzv_h{display:flex}.tp-cbzv_b{margin-right:4px;position:relative;width:var(--bld-us)}.tp-cbzv_b svg{display:block;height:16px;left:50%;margin-left:-8px;margin-top:-8px;position:absolute;top:50%;width:16px}.tp-cbzv_b svg path{stroke:var(--bs-bg);stroke-width:2}.tp-cbzv_t{flex:1}.tp-cbzv_p{height:0;margin-top:0;opacity:0;overflow:hidden;transition:height .2s ease-in-out,opacity .2s linear,margin .2s ease-in-out}.tp-cbzv.tp-cbzv-expanded .tp-cbzv_p{margin-top:var(--bld-s);opacity:1}.tp-cbzv.tp-cbzv-cpl .tp-cbzv_p{overflow:visible}.tp-cbzv .tp-popv{left:calc(-1 * var(--cnt-h-p));position:absolute;right:calc(-1 * var(--cnt-h-p));top:var(--bld-us)}.tp-cbzpv_t{margin-top:var(--bld-s)}.tp-cbzgv{height:auto;overflow:hidden;position:relative}.tp-cbzgv.tp-v-disabled{opacity:0.5}.tp-cbzgv_p{left:16px;position:absolute;right:16px;top:0}.tp-cbzgv_g{cursor:pointer;display:block;height:calc(var(--bld-us) * 5);width:100%}.tp-cbzgv_u{opacity:0.1;stroke:var(--in-fg);stroke-dasharray:1}.tp-cbzgv_l{fill:transparent;stroke:var(--in-fg)}.tp-cbzgv_v{opacity:0.5;stroke:var(--in-fg);stroke-dasharray:1}.tp-cbzgv_h{border:var(--in-fg) solid 1px;border-radius:50%;box-sizing:border-box;height:4px;margin-left:-2px;margin-top:-2px;pointer-events:none;position:absolute;width:4px}.tp-cbzgv:focus .tp-cbzgv_h-sel{background-color:var(--in-fg);border-width:0}.tp-cbzprvv{cursor:pointer;height:4px;padding:4px 0;position:relative}.tp-cbzprvv_g{display:block;height:100%;overflow:visible;width:100%}.tp-cbzprvv_t{opacity:0.5;stroke:var(--mo-fg)}.tp-cbzprvv_m{background-color:var(--mo-fg);border-radius:50%;height:4px;margin-left:-2px;margin-top:-2px;opacity:0;position:absolute;top:50%;transition:opacity 0.2s ease-out;width:4px}.tp-cbzprvv_m.tp-cbzprvv_m-a{opacity:1}.tp-fpsv{position:relative}.tp-fpsv_l{bottom:4px;color:var(--mo-fg);line-height:1;right:4px;pointer-events:none;position:absolute}.tp-fpsv_u{margin-left:0.2em;opacity:0.7}.tp-rslv{cursor:pointer;padding-left:8px;padding-right:8px}.tp-rslv.tp-v-disabled{opacity:0.5}.tp-rslv_t{height:calc(var(--bld-us));position:relative}.tp-rslv_t::before{background-color:var(--in-bg);border-radius:1px;content:'';height:2px;margin-top:-1px;position:absolute;top:50%;left:-4px;right:-4px}.tp-rslv_b{bottom:0;top:0;position:absolute}.tp-rslv_b::before{background-color:var(--in-fg);content:'';height:2px;margin-top:-1px;position:absolute;top:50%;left:0;right:0}.tp-rslv_k{height:calc(var(--bld-us) - 8px);margin-top:calc((var(--bld-us) - 8px) / -2);position:absolute;top:50%;width:8px}.tp-rslv_k.tp-rslv_k-min{margin-left:-8px}.tp-rslv_k.tp-rslv_k-max{margin-left:0}.tp-rslv.tp-rslv-zero .tp-rslv_k.tp-rslv_k-min{border-bottom-right-radius:0;border-top-right-radius:0}.tp-rslv.tp-rslv-zero .tp-rslv_k.tp-rslv_k-max{border-bottom-left-radius:0;border-top-left-radius:0}.tp-rsltxtv{display:flex}.tp-rsltxtv_s{flex:1}.tp-rsltxtv_t{flex:1;margin-left:4px}.tp-radv_l{display:block;position:relative}.tp-radv_i{left:0;opacity:0;position:absolute;top:0}.tp-radv_b{opacity:0.5}.tp-radv_i:hover+.tp-radv_b{background-color:var(--btn-bg-h)}.tp-radv_i:focus+.tp-radv_b{background-color:var(--btn-bg-f)}.tp-radv_i:active+.tp-radv_b{background-color:var(--btn-bg-a)}.tp-radv_i:checked+.tp-radv_b{opacity:1}.tp-radv_t{bottom:0;color:inherit;left:0;overflow:hidden;position:absolute;right:0;text-align:center;text-overflow:ellipsis;top:0}.tp-radv_i:disabled+.tp-radv_b>.tp-radv_t{opacity:0.5}.tp-radgridv{border-radius:var(--elm-br);display:grid;overflow:hidden;gap:2px}.tp-radgridv.tp-v-disabled{opacity:0.5}.tp-radgridv .tp-radv_b{border-radius:0}",
        accept(t) {
            const e = C,
                i = E(t, {
                    value: e.required.array(e.required.number),
                    view: e.required.constant("cubicbezier"),
                    expanded: e.optional.boolean,
                    label: e.optional.string,
                    picker: e.optional.custom((t) =>
                        "inline" === t || "popup" === t ? t : void 0
                    ),
                });
            return i ? { params: i } : null;
        },
        controller(t) {
            var e, i;
            const s = f(new se(...t.params.value), {
                    constraint: new Ut({
                        assembly: ne,
                        components: [0, 1, 2, 3].map((t) =>
                            t % 2 == 0 ? new H({ min: 0, max: 1 }) : void 0
                        ),
                    }),
                    equals: se.equals,
                }),
                n = new we(t.document, {
                    axis: {
                        baseStep: 0.1,
                        textProps: w.fromObject({ draggingScale: 0.01, formatter: wt(2) }),
                    },
                    expanded: null !== (e = t.params.expanded) && void 0 !== e && e,
                    pickerLayout: null !== (i = t.params.picker) && void 0 !== i ? i : "popup",
                    value: s,
                    viewProps: t.viewProps,
                });
            return new R(t.document, {
                blade: t.blade,
                props: w.fromObject({ label: t.params.label }),
                valueController: n,
            });
        },
        api: (t) =>
            t.controller instanceof R && t.controller.valueController instanceof we ?
            new te(t.controller) :
            null,
    };
    class ye extends e {
        begin() {
            this.controller_.valueController.begin();
        }
        end() {
            this.controller_.valueController.end();
        }
    }
    class Ce {
        constructor() {
            (this.start_ = null),
            (this.duration_ = 0),
            (this.fps_ = null),
            (this.frameCount_ = 0),
            (this.timestamps_ = []);
        }
        get duration() {
            return this.duration_;
        }
        get fps() {
            return this.fps_;
        }
        begin(t) {
            this.start_ = t.getTime();
        }
        calculateFps_(t) {
            if (0 === this.timestamps_.length) return null;
            const e = this.timestamps_[0];
            return (1e3 * (this.frameCount_ - e.frameCount)) / (t - e.time);
        }
        compactTimestamps_() {
            if (this.timestamps_.length <= 20) return;
            const t = this.timestamps_.length - 20;
            this.timestamps_.splice(0, t);
            const e = this.timestamps_[0].frameCount;
            this.timestamps_.forEach((t) => {
                    t.frameCount -= e;
                }),
                (this.frameCount_ -= e);
        }
        end(t) {
            if (null === this.start_) return;
            const e = t.getTime();
            (this.duration_ = e - this.start_),
            (this.start_ = null),
            (this.fps_ = this.calculateFps_(e)),
            this.timestamps_.push({ frameCount: this.frameCount_, time: e }),
                ++this.frameCount_,
                this.compactTimestamps_();
        }
    }
    const Ee = p("fps");
    class ke {
        constructor(t, e) {
            (this.element = t.createElement("div")),
            this.element.classList.add(Ee()),
                e.viewProps.bindClassModifiers(this.element),
                (this.graphElement = t.createElement("div")),
                this.graphElement.classList.add(Ee("g")),
                this.element.appendChild(this.graphElement);
            const i = t.createElement("div");
            i.classList.add(Ee("l")), this.element.appendChild(i);
            const s = t.createElement("span");
            s.classList.add(Ee("v")),
                (s.textContent = "--"),
                i.appendChild(s),
                (this.valueElement = s);
            const n = t.createElement("span");
            n.classList.add(Ee("u")), (n.textContent = "FPS"), i.appendChild(n);
        }
    }
    class Pe {
        constructor(t, e) {
            (this.stopwatch_ = new Ce()),
            (this.onTick_ = this.onTick_.bind(this)),
            (this.ticker_ = e.ticker),
            this.ticker_.emitter.on("tick", this.onTick_),
                (this.value_ = e.value),
                (this.viewProps = e.viewProps),
                (this.view = new ke(t, { viewProps: this.viewProps })),
                (this.graphC_ = new Xt(t, {
                    formatter: wt(0),
                    lineCount: e.lineCount,
                    maxValue: e.maxValue,
                    minValue: e.minValue,
                    value: this.value_,
                    viewProps: this.viewProps,
                })),
                this.view.graphElement.appendChild(this.graphC_.view.element),
                this.viewProps.handleDispose(() => {
                    this.graphC_.viewProps.set("disposed", !0), this.ticker_.dispose();
                });
        }
        begin() {
            this.stopwatch_.begin(new Date());
        }
        end() {
            this.stopwatch_.end(new Date());
        }
        onTick_() {
            const t = this.stopwatch_.fps;
            if (null !== t) {
                const e = this.value_.rawValue;
                (this.value_.rawValue = (function(t, e) {
                    const i = [...Ct(t), e];
                    return (
                        i.length > t.length ?
                        i.splice(0, i.length - t.length) :
                        xt(i, t.length),
                        i
                    );
                })(e, t)),
                (this.view.valueElement.textContent = t.toFixed(0));
            }
        }
    }

    function Ve(t, e) {
        return 0 === e ? new q() : new A(t, null != e ? e : At.defaultInterval);
    }
    const ze = {
        id: "fpsgraph",
        type: "blade",
        accept(t) {
            const e = C,
                i = E(t, {
                    view: e.required.constant("fpsgraph"),
                    interval: e.optional.number,
                    label: e.optional.string,
                    lineCount: e.optional.number,
                    max: e.optional.number,
                    min: e.optional.number,
                });
            return i ? { params: i } : null;
        },
        controller(t) {
            var e, i, s, n;
            const r = null !== (e = t.params.interval) && void 0 !== e ? e : 500;
            return new S(t.document, {
                blade: t.blade,
                props: w.fromObject({ label: t.params.label }),
                valueController: new Pe(t.document, {
                    lineCount: null !== (i = t.params.lineCount) && void 0 !== i ? i : 2,
                    maxValue: null !== (s = t.params.max) && void 0 !== s ? s : 90,
                    minValue: null !== (n = t.params.min) && void 0 !== n ? n : 0,
                    ticker: Ve(t.document, r),
                    value: yt(80),
                    viewProps: t.viewProps,
                }),
            });
        },
        api: (t) =>
            t.controller instanceof S && t.controller.valueController instanceof Pe ?
            new ye(t.controller) :
            null,
    };
    class Me {
        constructor(t, e) {
            (this.min = t), (this.max = e);
        }
        static isObject(t) {
            if ("object" != typeof t || null === t) return !1;
            const e = t.min,
                i = t.max;
            return "number" == typeof e && "number" == typeof i;
        }
        static equals(t, e) {
            return t.min === e.min && t.max === e.max;
        }
        get length() {
            return this.max - this.min;
        }
        toObject() {
            return { min: this.min, max: this.max };
        }
    }
    const Le = {
        fromComponents: (t) => new Me(t[0], t[1]),
        toComponents: (t) => [t.min, t.max],
    };
    class Te {
        constructor(t) {
            this.edge = t;
        }
        constrain(t) {
            var e, i, s, n, r, o, a, l;
            if (t.min <= t.max)
                return new Me(
                    null !==
                    (i =
                        null === (e = this.edge) || void 0 === e ?
                        void 0 :
                        e.constrain(t.min)) && void 0 !== i ?
                    i :
                    t.min,
                    null !==
                    (n =
                        null === (s = this.edge) || void 0 === s ?
                        void 0 :
                        s.constrain(t.max)) && void 0 !== n ?
                    n :
                    t.max
                );
            const p = (t.min + t.max) / 2;
            return new Me(
                null !==
                (o =
                    null === (r = this.edge) || void 0 === r ?
                    void 0 :
                    r.constrain(p)) && void 0 !== o ?
                o :
                p,
                null !==
                (l =
                    null === (a = this.edge) || void 0 === a ?
                    void 0 :
                    a.constrain(p)) && void 0 !== l ?
                l :
                p
            );
        }
    }
    const De = p("rsltxt");
    class Se {
        constructor(t, e) {
            (this.sliderView_ = e.sliderView),
            (this.textView_ = e.textView),
            (this.element = t.createElement("div")),
            this.element.classList.add(De());
            const i = t.createElement("div");
            i.classList.add(De("s")),
                i.appendChild(this.sliderView_.element),
                this.element.appendChild(i);
            const s = t.createElement("div");
            s.classList.add(De("t")),
                s.appendChild(this.textView_.element),
                this.element.appendChild(s);
        }
    }
    const Ke = p("rsl");
    class je {
        constructor(t, e) {
            (this.maxValue_ = e.maxValue),
            (this.minValue_ = e.minValue),
            (this.element = t.createElement("div")),
            this.element.classList.add(Ke()),
                e.viewProps.bindClassModifiers(this.element),
                (this.value_ = e.value),
                this.value_.emitter.on("change", this.onValueChange_.bind(this));
            const i = t.createElement("div");
            i.classList.add(Ke("t")),
                this.element.appendChild(i),
                (this.trackElement = i);
            const s = t.createElement("div");
            s.classList.add(Ke("b")), i.appendChild(s), (this.barElement = s);
            const n = ["min", "max"].map((e) => {
                const s = t.createElement("div");
                return s.classList.add(Ke("k"), Ke("k", e)), i.appendChild(s), s;
            });
            (this.knobElements = [n[0], n[1]]), this.update();
        }
        valueToX_(t) {
            return 100 * St(Tt(t, this.minValue_, this.maxValue_, 0, 1), 0, 1);
        }
        update() {
            const t = this.value_.rawValue;
            0 === t.length ?
                this.element.classList.add(Ke(void 0, "zero")) :
                this.element.classList.remove(Ke(void 0, "zero"));
            const e = [this.valueToX_(t.min), this.valueToX_(t.max)];
            (this.barElement.style.left = `${e[0]}%`),
            (this.barElement.style.right = 100 - e[1] + "%"),
            this.knobElements.forEach((t, i) => {
                t.style.left = `${e[i]}%`;
            });
        }
        onValueChange_() {
            this.update();
        }
    }
    class Ne {
        constructor(t, e) {
            (this.grabbing_ = null),
            (this.grabOffset_ = 0),
            (this.onPointerDown_ = this.onPointerDown_.bind(this)),
            (this.onPointerMove_ = this.onPointerMove_.bind(this)),
            (this.onPointerUp_ = this.onPointerUp_.bind(this)),
            (this.maxValue_ = e.maxValue),
            (this.minValue_ = e.minValue),
            (this.viewProps = e.viewProps),
            (this.value = e.value),
            (this.view = new je(t, {
                maxValue: e.maxValue,
                minValue: e.minValue,
                value: this.value,
                viewProps: e.viewProps,
            }));
            const i = new Lt(this.view.trackElement);
            i.emitter.on("down", this.onPointerDown_),
                i.emitter.on("move", this.onPointerMove_),
                i.emitter.on("up", this.onPointerUp_);
        }
        ofs_() {
            return "min" === this.grabbing_ ?
                this.view.knobElements[0].getBoundingClientRect().width / 2 :
                "max" === this.grabbing_ ?
                -this.view.knobElements[1].getBoundingClientRect().width / 2 :
                0;
        }
        valueFromData_(t) {
            if (!t.point) return null;
            return Tt(
                (t.point.x + this.ofs_()) / t.bounds.width,
                0,
                1,
                this.minValue_,
                this.maxValue_
            );
        }
        onPointerDown_(t) {
            if (!t.data.point) return;
            const e = t.data.point.x / t.data.bounds.width,
                i = this.value.rawValue,
                s = Tt(i.min, this.minValue_, this.maxValue_, 0, 1),
                n = Tt(i.max, this.minValue_, this.maxValue_, 0, 1);
            Math.abs(n - e) <= 0.025 ?
                (this.grabbing_ = "max") :
                Math.abs(s - e) <= 0.025 ?
                (this.grabbing_ = "min") :
                e >= s && e <= n ?
                ((this.grabbing_ = "length"),
                    (this.grabOffset_ = Tt(
                        e - s,
                        0,
                        1,
                        0,
                        this.maxValue_ - this.minValue_
                    ))) :
                e < s ?
                ((this.grabbing_ = "min"), this.onPointerMove_(t)) :
                e > n && ((this.grabbing_ = "max"), this.onPointerMove_(t));
        }
        applyPointToValue_(t, e) {
            const i = this.valueFromData_(t);
            if (null !== i)
                if ("min" === this.grabbing_)
                    this.value.setRawValue(new Me(i, this.value.rawValue.max), e);
                else if ("max" === this.grabbing_)
                this.value.setRawValue(new Me(this.value.rawValue.min, i), e);
            else if ("length" === this.grabbing_) {
                const t = this.value.rawValue.length;
                let s = i - this.grabOffset_,
                    n = s + t;
                s < this.minValue_ ?
                    ((s = this.minValue_), (n = this.minValue_ + t)) :
                    n > this.maxValue_ &&
                    ((s = this.maxValue_ - t), (n = this.maxValue_)),
                    this.value.setRawValue(new Me(s, n), e);
            }
        }
        onPointerMove_(t) {
            this.applyPointToValue_(t.data, { forceEmit: !1, last: !1 });
        }
        onPointerUp_(t) {
            this.applyPointToValue_(t.data, { forceEmit: !0, last: !0 }),
                (this.grabbing_ = null);
        }
    }
    class Oe {
        constructor(t, e) {
            (this.value = e.value),
            (this.viewProps = e.viewProps),
            (this.sc_ = new Ne(t, e));
            const i = {
                baseStep: e.baseStep,
                constraint: e.constraint,
                textProps: w.fromObject({
                    draggingScale: e.draggingScale,
                    formatter: e.formatter,
                }),
            };
            (this.tc_ = new qt(t, {
                assembly: Le,
                axes: [i, i],
                parser: e.parser,
                value: this.value,
                viewProps: e.viewProps,
            })),
            (this.view = new Se(t, {
                sliderView: this.sc_.view,
                textView: this.tc_.view,
            }));
        }
        get textController() {
            return this.tc_;
        }
    }

    function Ie(t) {
        return Me.isObject(t) ? new Me(t.min, t.max) : new Me(0, 0);
    }

    function Re(t, e) {
        t.writeProperty("max", e.max), t.writeProperty("min", e.min);
    }

    function Ue(t) {
        const e = [],
            i = (function(t) {
                return ("max" in t && !n(t.max)) || ("min" in t && !n(t.min)) ?
                    new H({ max: t.max, min: t.min }) :
                    null;
            })(t);
        i && e.push(i);
        const s = (function(t) {
            return "step" in t && !n(t.step) ? new X(t.step) : null;
        })(t);
        return s && e.push(s), new Te(new G(e));
    }
    const $e = {
        id: "input-interval",
        type: "input",
        css: ".tp-cbzv_b,.tp-rslv_k,.tp-radv_b,.tp-cbzgv{-webkit-appearance:none;-moz-appearance:none;appearance:none;background-color:transparent;border-width:0;font-family:inherit;font-size:inherit;font-weight:inherit;margin:0;outline:none;padding:0}.tp-cbzv_b,.tp-rslv_k,.tp-radv_b{background-color:var(--btn-bg);border-radius:var(--elm-br);color:var(--btn-fg);cursor:pointer;display:block;font-weight:bold;height:var(--bld-us);line-height:var(--bld-us);overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.tp-cbzv_b:hover,.tp-rslv_k:hover,.tp-radv_b:hover{background-color:var(--btn-bg-h)}.tp-cbzv_b:focus,.tp-rslv_k:focus,.tp-radv_b:focus{background-color:var(--btn-bg-f)}.tp-cbzv_b:active,.tp-rslv_k:active,.tp-radv_b:active{background-color:var(--btn-bg-a)}.tp-cbzv_b:disabled,.tp-rslv_k:disabled,.tp-radv_b:disabled{opacity:0.5}.tp-cbzgv{background-color:var(--in-bg);border-radius:var(--elm-br);box-sizing:border-box;color:var(--in-fg);font-family:inherit;height:var(--bld-us);line-height:var(--bld-us);min-width:0;width:100%}.tp-cbzgv:hover{background-color:var(--in-bg-h)}.tp-cbzgv:focus{background-color:var(--in-bg-f)}.tp-cbzgv:active{background-color:var(--in-bg-a)}.tp-cbzgv:disabled{opacity:0.5}.tp-btngridv{border-radius:var(--elm-br);display:grid;overflow:hidden;gap:2px}.tp-btngridv.tp-v-disabled{opacity:0.5}.tp-btngridv .tp-btnv_b:disabled{opacity:1}.tp-btngridv .tp-btnv_b:disabled .tp-btnv_t{opacity:0.5}.tp-btngridv .tp-btnv_b{border-radius:0}.tp-cbzv{position:relative}.tp-cbzv_h{display:flex}.tp-cbzv_b{margin-right:4px;position:relative;width:var(--bld-us)}.tp-cbzv_b svg{display:block;height:16px;left:50%;margin-left:-8px;margin-top:-8px;position:absolute;top:50%;width:16px}.tp-cbzv_b svg path{stroke:var(--bs-bg);stroke-width:2}.tp-cbzv_t{flex:1}.tp-cbzv_p{height:0;margin-top:0;opacity:0;overflow:hidden;transition:height .2s ease-in-out,opacity .2s linear,margin .2s ease-in-out}.tp-cbzv.tp-cbzv-expanded .tp-cbzv_p{margin-top:var(--bld-s);opacity:1}.tp-cbzv.tp-cbzv-cpl .tp-cbzv_p{overflow:visible}.tp-cbzv .tp-popv{left:calc(-1 * var(--cnt-h-p));position:absolute;right:calc(-1 * var(--cnt-h-p));top:var(--bld-us)}.tp-cbzpv_t{margin-top:var(--bld-s)}.tp-cbzgv{height:auto;overflow:hidden;position:relative}.tp-cbzgv.tp-v-disabled{opacity:0.5}.tp-cbzgv_p{left:16px;position:absolute;right:16px;top:0}.tp-cbzgv_g{cursor:pointer;display:block;height:calc(var(--bld-us) * 5);width:100%}.tp-cbzgv_u{opacity:0.1;stroke:var(--in-fg);stroke-dasharray:1}.tp-cbzgv_l{fill:transparent;stroke:var(--in-fg)}.tp-cbzgv_v{opacity:0.5;stroke:var(--in-fg);stroke-dasharray:1}.tp-cbzgv_h{border:var(--in-fg) solid 1px;border-radius:50%;box-sizing:border-box;height:4px;margin-left:-2px;margin-top:-2px;pointer-events:none;position:absolute;width:4px}.tp-cbzgv:focus .tp-cbzgv_h-sel{background-color:var(--in-fg);border-width:0}.tp-cbzprvv{cursor:pointer;height:4px;padding:4px 0;position:relative}.tp-cbzprvv_g{display:block;height:100%;overflow:visible;width:100%}.tp-cbzprvv_t{opacity:0.5;stroke:var(--mo-fg)}.tp-cbzprvv_m{background-color:var(--mo-fg);border-radius:50%;height:4px;margin-left:-2px;margin-top:-2px;opacity:0;position:absolute;top:50%;transition:opacity 0.2s ease-out;width:4px}.tp-cbzprvv_m.tp-cbzprvv_m-a{opacity:1}.tp-fpsv{position:relative}.tp-fpsv_l{bottom:4px;color:var(--mo-fg);line-height:1;right:4px;pointer-events:none;position:absolute}.tp-fpsv_u{margin-left:0.2em;opacity:0.7}.tp-rslv{cursor:pointer;padding-left:8px;padding-right:8px}.tp-rslv.tp-v-disabled{opacity:0.5}.tp-rslv_t{height:calc(var(--bld-us));position:relative}.tp-rslv_t::before{background-color:var(--in-bg);border-radius:1px;content:'';height:2px;margin-top:-1px;position:absolute;top:50%;left:-4px;right:-4px}.tp-rslv_b{bottom:0;top:0;position:absolute}.tp-rslv_b::before{background-color:var(--in-fg);content:'';height:2px;margin-top:-1px;position:absolute;top:50%;left:0;right:0}.tp-rslv_k{height:calc(var(--bld-us) - 8px);margin-top:calc((var(--bld-us) - 8px) / -2);position:absolute;top:50%;width:8px}.tp-rslv_k.tp-rslv_k-min{margin-left:-8px}.tp-rslv_k.tp-rslv_k-max{margin-left:0}.tp-rslv.tp-rslv-zero .tp-rslv_k.tp-rslv_k-min{border-bottom-right-radius:0;border-top-right-radius:0}.tp-rslv.tp-rslv-zero .tp-rslv_k.tp-rslv_k-max{border-bottom-left-radius:0;border-top-left-radius:0}.tp-rsltxtv{display:flex}.tp-rsltxtv_s{flex:1}.tp-rsltxtv_t{flex:1;margin-left:4px}.tp-radv_l{display:block;position:relative}.tp-radv_i{left:0;opacity:0;position:absolute;top:0}.tp-radv_b{opacity:0.5}.tp-radv_i:hover+.tp-radv_b{background-color:var(--btn-bg-h)}.tp-radv_i:focus+.tp-radv_b{background-color:var(--btn-bg-f)}.tp-radv_i:active+.tp-radv_b{background-color:var(--btn-bg-a)}.tp-radv_i:checked+.tp-radv_b{opacity:1}.tp-radv_t{bottom:0;color:inherit;left:0;overflow:hidden;position:absolute;right:0;text-align:center;text-overflow:ellipsis;top:0}.tp-radv_i:disabled+.tp-radv_b>.tp-radv_t{opacity:0.5}.tp-radgridv{border-radius:var(--elm-br);display:grid;overflow:hidden;gap:2px}.tp-radgridv.tp-v-disabled{opacity:0.5}.tp-radgridv .tp-radv_b{border-radius:0}",
        accept: (t, e) => {
            if (!Me.isObject(t)) return null;
            const i = C,
                s = E(e, {
                    format: i.optional.function,
                    max: i.optional.number,
                    min: i.optional.number,
                    step: i.optional.number,
                });
            return s ? { initialValue: new Me(t.min, t.max), params: s } : null;
        },
        binding: {
            reader: (t) => Ie,
            constraint: (t) => Ue(t.params),
            equals: Me.equals,
            writer: (t) => Re,
        },
        controller(t) {
            var e;
            const i = t.value,
                s = t.constraint;
            if (!(s instanceof Te)) throw o.shouldNeverHappen();
            const n = (i.rawValue.min + i.rawValue.max) / 2,
                r =
                null !== (e = t.params.format) && void 0 !== e ?
                e :
                wt(
                    (function(t, e) {
                        const i = t && F(t, X);
                        return i ? Dt(i.step) : Math.max(Dt(e), 2);
                    })(s.edge, n)
                ),
                a = s.edge && F(s.edge, H);
            if (
                void 0 !== (null == a ? void 0 : a.minValue) &&
                void 0 !== (null == a ? void 0 : a.maxValue)
            )
                return new Oe(t.document, {
                    baseStep: It(s.edge),
                    constraint: s.edge,
                    draggingScale: Rt(a, n),
                    formatter: r,
                    maxValue: a.maxValue,
                    minValue: a.minValue,
                    parser: _t,
                    value: i,
                    viewProps: t.viewProps,
                });
            const l = {
                baseStep: It(s.edge),
                constraint: s.edge,
                textProps: w.fromObject({ draggingScale: n, formatter: r }),
            };
            return new qt(t.document, {
                assembly: Le,
                axes: [l, l],
                parser: _t,
                value: i,
                viewProps: t.viewProps,
            });
        },
    };
    class Be {
        constructor(t) {
            this.controller_ = t;
        }
        get disabled() {
            return this.controller_.viewProps.get("disabled");
        }
        set disabled(t) {
            this.controller_.viewProps.set("disabled", t);
        }
        get title() {
            var t;
            return null !== (t = this.controller_.props.get("title")) && void 0 !== t ?
                t :
                "";
        }
        set title(t) {
            this.controller_.props.set("title", t);
        }
    }
    class qe extends s {
        constructor(t, e, i, s, n) {
            super(t, s, n), (this.cell = e), (this.index = i);
        }
    }
    class Ae extends e {
        constructor(t) {
            super(t), (this.cellToApiMap_ = new Map());
            this.controller_.valueController.cellControllers.forEach((t) => {
                const e = new Be(t);
                this.cellToApiMap_.set(t, e);
            });
        }
        get value() {
            return this.controller_.value;
        }
        cell(t, e) {
            const i = this.controller_.valueController,
                s = i.cellControllers[e * i.size[0] + t];
            return this.cellToApiMap_.get(s);
        }
        on(t, e) {
            const i = e.bind(this);
            this.controller_.value.emitter.on(t, (t) => {
                const e = this.controller_.valueController,
                    s = e.findCellByValue(t.rawValue);
                if (!s) return;
                const n = this.cellToApiMap_.get(s);
                if (!n) return;
                const r = e.cellControllers.indexOf(s);
                i(
                    new qe(
                        this,
                        n, [r % e.size[0], Math.floor(r / e.size[0])],
                        t.rawValue,
                        void 0
                    )
                );
            });
        }
    }
    const Ge = p("rad");
    class Fe {
        constructor(t, e) {
            (this.element = t.createElement("div")),
            this.element.classList.add(Ge()),
                e.viewProps.bindClassModifiers(this.element);
            const i = t.createElement("label");
            i.classList.add(Ge("l")), this.element.appendChild(i);
            const s = t.createElement("input");
            s.classList.add(Ge("i")),
                (s.name = e.name),
                (s.type = "radio"),
                e.viewProps.bindDisabled(s),
                i.appendChild(s),
                (this.inputElement = s);
            const n = t.createElement("div");
            n.classList.add(Ge("b")), i.appendChild(n);
            const r = t.createElement("div");
            r.classList.add(Ge("t")),
                n.appendChild(r),
                d(e.props, "title", (t) => {
                    r.textContent = t;
                });
        }
    }
    class He {
        constructor(t, e) {
            (this.props = e.props),
            (this.viewProps = e.viewProps),
            (this.view = new Fe(t, {
                name: e.name,
                props: this.props,
                viewProps: this.viewProps,
            }));
        }
    }
    class Xe {
        constructor(t, e) {
            (this.cellCs_ = []),
            (this.cellValues_ = []),
            (this.onCellInputChange_ = this.onCellInputChange_.bind(this)),
            (this.size = e.size);
            const [i, s] = this.size;
            for (let n = 0; n < s; n++)
                for (let s = 0; s < i; s++) {
                    const i = new He(t, {
                        name: e.groupName,
                        props: w.fromObject(Object.assign({}, e.cellConfig(s, n))),
                        viewProps: B.create(),
                    });
                    this.cellCs_.push(i), this.cellValues_.push(e.cellConfig(s, n).value);
                }
                (this.value = e.value),
                c(this.value, (t) => {
                    const e = this.findCellByValue(t);
                    e && (e.view.inputElement.checked = !0);
                }),
                (this.viewProps = B.create()),
                (this.view = new I(t, {
                    viewProps: this.viewProps,
                    viewName: "radgrid",
                })),
                (this.view.element.style.gridTemplateColumns = `repeat(${i}, 1fr)`),
                this.cellCs_.forEach((t) => {
                    t.view.inputElement.addEventListener(
                            "change",
                            this.onCellInputChange_
                        ),
                        this.view.element.appendChild(t.view.element);
                });
        }
        get cellControllers() {
            return this.cellCs_;
        }
        findCellByValue(t) {
            const e = this.cellValues_.findIndex((e) => e === t);
            return e < 0 ? null : this.cellCs_[e];
        }
        onCellInputChange_(t) {
            const e = t.currentTarget,
                i = this.cellCs_.findIndex((t) => t.view.inputElement === e);
            i < 0 || (this.value.rawValue = this.cellValues_[i]);
        }
    }
    const Ye = [
        Zt,
        xe,
        ze,
        $e,
        {
            id: "radiogrid",
            type: "blade",
            accept(t) {
                const e = C,
                    i = E(t, {
                        cells: e.required.function,
                        groupName: e.required.string,
                        size: e.required.array(e.required.number),
                        value: e.required.raw,
                        view: e.required.constant("radiogrid"),
                        label: e.optional.string,
                    });
                return i ? { params: i } : null;
            },
            controller: (t) =>
                new R(t.document, {
                    blade: t.blade,
                    props: w.fromObject({ label: t.params.label }),
                    valueController: new Xe(t.document, {
                        groupName: t.params.groupName,
                        cellConfig: t.params.cells,
                        size: t.params.size,
                        value: f(t.params.value),
                    }),
                }),
            api: (t) =>
                t.controller instanceof R && t.controller.valueController instanceof Xe ?
                new Ae(t.controller) :
                null,
        },
        {
            id: "input-radiogrid",
            type: "input",
            accept(t, e) {
                if ("number" != typeof t) return null;
                const i = C,
                    s = E(e, {
                        cells: i.required.function,
                        groupName: i.required.string,
                        size: i.required.array(i.required.number),
                        view: i.required.constant("radiogrid"),
                    });
                return s ? { initialValue: t, params: s } : null;
            },
            binding: { reader: (t) => ft, writer: (t) => Ot },
            controller: (t) =>
                new Xe(t.document, {
                    cellConfig: t.params.cells,
                    groupName: t.params.groupName,
                    size: t.params.size,
                    value: t.value,
                }),
        },
    ];
    (t.CubicBezier = se),
    (t.plugins = Ye),
    Object.defineProperty(t, "__esModule", { value: !0 });
});